<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>changsk&#39;s blogs</title>
  
  <subtitle>chang.sk@foxmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://changsk.top/"/>
  <updated>2020-07-12T07:15:36.608Z</updated>
  <id>http://changsk.top/</id>
  
  <author>
    <name>changsk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈SSL/TLS工作原理</title>
    <link href="http://changsk.top/2020/07/12/SSL-TLS/"/>
    <id>http://changsk.top/2020/07/12/SSL-TLS/</id>
    <published>2020-07-12T03:26:22.000Z</published>
    <updated>2020-07-12T07:15:36.608Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://zhuanlan.zhihu.com/p/36981565" target="_blank" rel="noopener">浅谈SSL/TLS工作原理</a></p><a id="more"></a><p>为了保证网络通信的安全性，需要对网络上传递的数据进行加密。现在主流的加密方法就是SSL (Secure Socket Layer)，TLS (Transport Layer Security)。后者比前者要新一些，不过在很多场合还是用SSL指代SSL和TLS。</p><p>先来回顾一下网络通信加密的发展过程，假设A和B之间要网络通信。</p><h2 id="远古时代"><a href="#远古时代" class="headerlink" title="远古时代"></a><strong>远古时代</strong></h2><p>远古时代自然是<strong>民风淳朴，路不拾遗，夜不闭户</strong>。A要发数据给B，根本不用担心窃听和篡改，直接发就好了。</p><p><img src="1.jpg" alt="img"></p><h2 id="上古时代"><a href="#上古时代" class="headerlink" title="上古时代"></a><strong>上古时代</strong></h2><p>随着时代的发展，渐渐的有了一类人—C。C不仅会<strong>监听</strong>A和B之间的网络数据，还会<strong>拦截</strong>A和B之间的数据，<strong>伪造</strong>之后再发给A或者B，进而<strong>欺骗</strong>A和B。C就是<strong>中间人攻击</strong>（Man In The Middle Attack）。</p><p>为了应对C的攻击，A和B开始对自己的数据进行加密。A和B会使用一个共享的密钥，A在发送数据之前，用这个密钥对数据加密。B在收到数据之后，用这个密钥对数据解密。因为加密解密用的是同一个密钥，所以这里的加密算法称为<strong>对称加密算法</strong>。</p><p><img src="2.jpg" alt="img"></p><p>在1981年，DES（Data Encryption Standard）被提出，这是一种对称加密算法。DES使用一个<strong>56bit</strong>的密钥，来完成数据的加解密。尽管56bit看起来有点短，但时间毕竟是在上古时代，56bit已经够用了。就这样，网络数据的加密开始了。</p><p>因为采用了DES，A和B现在不用担心数据被C拦截了。因为就算C拦截了，也只能获取加密之后的数据， 没有密钥就没有办法获取原始数据。</p><p>但是A和B之间又有了一个新的问题，他们需要一个共享的56bit密钥，并且这个密钥一定要保持私密，否则被C拿到了，就没有加密的意义了。首先A、B不能通过网络来传递密钥，因为<strong>密钥确定以前，所有的网络通信都是不安全的</strong>。如果通过网络传递密钥，密钥有可能被拦截。拦截了就没有加密的意义了。为了安全，A和B只能先见一面，私下商量好密钥，这样C就没办法获取密钥。如果因为任何原因，之前的密钥泄露了，那么AB还得再见一面，重新商量一个密钥。</p><p>现在A和B之间，最私密的信息就是这个密钥了，只要保证密钥的安全，那么AB之间整个网络通信都是安全的。</p><h2 id="中古时代"><a href="#中古时代" class="headerlink" title="中古时代"></a><strong>中古时代</strong></h2><p>A和B小心的保护着密钥，不让C知道。但是道高一尺，魔高一丈。随着技术的发展，计算机速度变得很快，快到可以通过暴力破解的方法来解密经过DES加密的信息。不就是56bit的密钥吗？C找了一个好点的计算机，尝试每一个可能的值，这样总能找到一个密钥破解A和B之间的加密信息。倒不是说DES在提出时没有考虑过这种情况，只是在上古时代，计算机没这么快，破解56bit的密钥需要的时间非常长。但是现在是中古时代，可能只需要几天就可以破解56bit的密钥。</p><p>为了应对这个情况，新的协议被提出，例如<strong>triple-DES</strong>（最长168bit的密钥），<strong>AES</strong>（最高256bit的密钥）。经过这些改进，至少在可以预见的未来，计算机是没有办法在有限的时间内，暴力破解这个长度的密钥。所以，在中古时代，将对称加密算法的密钥长度变长，来应对中间人攻击。但是A和B还是需要见面商量一个密钥。</p><h2 id="现代"><a href="#现代" class="headerlink" title="现代"></a><strong>现代</strong></h2><p><strong>非对称加密</strong></p><p>时间到了现代。网络通信变得十分发达，<strong>A不只与B通信，还同时还跟其他10000个人进行网络通信。A不可能每个人都跑去跟他们见个面，商量一个密钥。</strong></p><p>所以一种新的加密算法被提出，这就是非对称加密算法。非对称加密使用两个密钥，一个是public key，一个是private key。通过一个特殊的数学算法，使得数据的加密和解密使用不同的密钥。因为用的是不同的密钥，所以称为<strong>非对称加密</strong>。非对称加密最著名的是<strong>RSA</strong>算法，这是以其发明者Rivest, Shamir 和Adleman命名。非对称加密算法里面的public key和private key<strong>在数学上是相关的</strong>，这样才能用一个加密，用另一个解密。不过，尽管是相关的，但以现有的数学算法，又没有办法从一个密钥，算出另一个密钥（<strong>因为算力不够，破解需要的时间很长</strong>）。</p><p>非对称加密的好处在于，现在A可以保留private key，通过网络传递public key。这样，就算public key被C拦截了，因为没有private key，C还是没有办法完成信息的破解。既然不怕C知道public key，那现在A和B不用再见面商量密钥，直接通过网络传递public key就行。</p><p>具体在使用中，A和B都各有一个public key和一个private key，这些key根据相应的算法已经生成好了。private key只保留在各自的本地，public key传给对方。A要给B发送网络数据，那么A先使用自己的private key（只有A知道）加密数据的hash值，之后再用B的public key加密数据。之后，A将加密的hash值和加密的数据再加一些其他的信息，发送给B。B收到了之后，先用自己的private key（只有B知道）解密数据，本地运算一个hash值，之后用A的public key解密hash值，对比两个hash值，以检验数据的完整性。</p><p><img src="3.jpg" alt="img"></p><p>在这个过程中，总共有4个密钥，分别是A的public/private key，和B的public/private key。</p><p><strong>如果B的解密结果符合预期，那么至少可以证明，这个信息只有B能获取，因为B的private key参与了解密，而B的private key其他人都不知道。并且，这个信息是来自A，而不是C伪造的，因为A的public key参与了解密。</strong>一切看起来似乎很美好。</p><p><strong>非对称加密的安全隐患</strong></p><p>但是在一切的最开始，A和B要通过网络交换public key。如果C在中间拦截了呢？假设有这种情况，C拦截了A和B的public key，又分别用自己的public key发给A和B。A和B并不知道，他们还以为这个public key来自对方。当A给B发消息时，A先用自己的private key加密数据的hash值，之后用C传来的假的public key加密数据，再发出去。C拦截到之后，先用C自己的private key解密数据，C就获取了A的原始信息！之后，C可以篡改数据内容，再用自己的private key加密数据的hash值，用之前拦截的B的public key加密数据，再发给B。B收到以后，先用自己的private key解密数据，再用C传来的假public key解密hash值，发现匹配。这样，B收到了一条来自C的假的信息，但是B还以为信息来自于A。中间人攻击仍然可能存在！</p><p>完了，一切都崩了，加密搞的这么复杂，居然还不能保证网络数据的安全。回顾一下，问题出就出在最开始通过网络交换public key。看起来为了保证public key不被拦截，A和B似乎还是要见一面，交换一下public key。这一下就回到了上古时代。</p><p>不过，虽然A和B现在还是要见一面，但见面的实质已经变了。在上古时代，见面是为了商量一个密钥，密钥的内容很重要，不能让别人知道密钥的内容。而在现代，见面是为了确认public key的真实性，public key的内容是可以公开的。</p><p>那如果有其他办法能保证public key的真实性，A和B是可以不用见面交换public key的。</p><p><strong>CA</strong></p><p>现实中，通过CA（Certificate Authority，认证机构）来保证public key的真实性。CA也是基于非对称加密算法来工作。<strong>有了CA，B会先把自己的public key（和一些其他信息）交给CA。CA用自己的private key加密这些数据，加密完的数据称为B的数字证书。现在B要向A传递public key，B传递的是CA加密之后的数字证书。A收到以后，会通过CA发布的CA证书（包含了CA的public key），来解密B的数字证书，从而获得B的public key。</strong></p><p>但是等等，A怎么确保CA证书不被劫持。C完全可以把一个假的CA证书发给A，进而欺骗A。CA的大杀器就是，<strong>CA把自己的CA证书集成在了浏览器和操作系统里面。</strong>A拿到浏览器或者操作系统的时候，已经有了CA证书，没有必要通过网络获取，那自然也不存在劫持的问题。</p><p><img src="4.jpg" alt="img"></p><p>现在A和B都有了CA认证的数字证书。<strong>在交换public key的阶段，直接交换彼此的数字证书就行。</strong>而中间人C，还是可以拦截A和B的public key，也可以用CA证书解密获得A和B的public key。但是，<strong>C没有办法伪造public key了</strong>。因为C不在CA体系里面，C没有CA的private key，所以C是没有办法伪造出一个可以通过CA认证的数字证书。如果不能通过CA认证，A和B自然也不会相信这个伪造的证书。所以，<strong>采用CA认证以后，A和B的public key的真实性得到了保证，A和B可以通过网络交换public key（实际是被CA加密之后的数字证书）。</strong></p><p>除非有种情况，A内置的CA证书被篡改了，例如A使用了盗版的系统，“优化”了的非官方浏览器，或者被病毒攻击了，那这个时候，A<strong>有可能</strong>会认可非CA认证的数字证书，C就有机会发起中间人攻击。所以，用正版至少是安全的。</p><p><strong>实际使用</strong></p><p>非对称加密算法比对称加密算法要复杂的多，处理起来也要慢得多。如果所有的网络数据都用非对称加密算法来加密，那效率会很低。所以在实际中，非对称加密只会用来传递一条信息，那就是用于对称加密的密钥。当用于对称加密的密钥确定了，A和B还是通过对称加密算法进行网络通信。这样，既保证了网络通信的安全性，又不影响效率，A和B也不用见面商量密钥了。</p><p>所以，在现代，A和B之间要进行安全，省心的网络通信，需要经过以下几个步骤</p><ul><li>通过CA体系交换public key</li><li>通过非对称加密算法，交换用于对称加密的密钥</li><li>通过对称加密算法，加密正常的网络通信</li></ul><p>这基本就是SSL/TLS的工作过程了。</p><p><strong>HTTPS</strong></p><p>HTTPS全称是<strong>HTTP over SSL</strong>，<strong>也就是通过SSL/TLS加密HTTP数据</strong>，这或许是SSL最广泛的应用。</p><p>前面提到了CA作为一个公证机构，能确保数字证书的真实性。但是在实际使用中，CA认证一般是要收费的，普通人不会去做CA认证，进而获得属于自己的数字证书。更多的是，一些大的机构，例如银行，网店，金融机构，它们去获得自己的数字证书。那这种情况如何保证网络通信的安全呢？</p><p>这些机构获取到CA授予的数字证书之后，将数字证书加到自己的web服务器上。当用户要去访问它们的网页，例如<a href="https://link.zhihu.com/?target=https%3A//domain.com" target="_blank" rel="noopener">https://domain.com</a>，会经过下图所示的步骤。</p><p><img src="5.jpg" alt="img"></p><ul><li><p>用户向web服务器发起一个安全连接的请求</p></li><li><p>服务器返回经过CA认证的数字证书，证书里面包含了服务器的public key</p></li><li><p>用户拿到数字证书，验证证书的有效性（证书颁发机构是否是公认的权威机构、证书是否过期、证书拥有者是否是自己想要访问的网站地址等），验证通过则用自己浏览器内置的CA证书解密得到服务器的public key</p></li><li><p>用户用服务器的public key加密一个用于接下来的对称加密算法的密钥，传给web服务器，因为只有服务器有private key可以解密，所以不用担心中间人拦截这个加密的密钥</p></li><li><p>服务器拿到这个加密的密钥，解密获取密钥，再使用对称加密算法，和用户完成接下来的网络通信</p></li></ul><p>现在用户知道自己访问的网站是正规的网站，否则用户浏览器会报错说不能用CA证书解析。服务器通过CA授予的数字证书自证了身份。但，这里的安全隐患在于，服务器怎么知道访问者就是真用户呢？之前介绍的双向认证是可以通过数字证书验明用户的正身，现在用户为了省钱没有数字证书。<strong>这种情况下一般是通过用户名密码来确认用户。所以，大家要保管好自己的密码。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36981565&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈SSL/TLS工作原理&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://changsk.top/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="HTTPS" scheme="http://changsk.top/tags/HTTPS/"/>
    
      <category term="SSL" scheme="http://changsk.top/tags/SSL/"/>
    
      <category term="TLS" scheme="http://changsk.top/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1402:reducing-dishes(做菜顺序)</title>
    <link href="http://changsk.top/2020/07/11/leetcode-1402/"/>
    <id>http://changsk.top/2020/07/11/leetcode-1402/</id>
    <published>2020-07-10T16:29:36.000Z</published>
    <updated>2020-07-10T16:55:41.682Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reducing-dishes/" target="_blank" rel="noopener">做菜顺序</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Hard</p></blockquote><p>一个厨师收集了他 n 道菜的满意程度 satisfaction ，这个厨师做出每道菜的时间都是 1 单位时间。</p><p>一道菜的 「喜爱时间」系数定义为烹饪这道菜以及之前每道菜所花费的时间乘以这道菜的满意程度，也就是 time[i]*satisfaction[i] 。</p><p>请你返回做完所有菜 「喜爱时间」总和的最大值为多少。</p><p>你可以按 任意 顺序安排做菜的顺序，你也可以选择放弃做某些菜来获得更大的总和。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：satisfaction = [-1,-8,0,5,-9]<br>输出：14<br>解释：去掉第二道和最后一道菜，最大的喜爱时间系数和为 (-1<em>1 + 0</em>2 + 5*3 = 14) 。每道菜都需要花费 1 单位时间完成。</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：satisfaction = [4,3,2]<br>输出：20<br>解释：按照原来顺序相反的时间做菜 (2<em>1 + 3</em>2 + 4*3 = 20)</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：satisfaction = [-1,-4,-5]<br>输出：0<br>解释：大家都不喜欢这些菜，所以不做任何菜可以获得最大的喜爱时间系数。</p><h3 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h3><p>输入：satisfaction = [-2,5,-1,0,3,-3]<br>输出：35</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>n == satisfaction.length<br>1 &lt;= n &lt;= 500<br>-10^3 &lt;= satisfaction[i] &lt;= 10^3</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>一开始想到回溯，但是想了想，复杂度太高了，遂放弃。。。</p><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p><strong>分析</strong></p><p>我们从最简单的情况开始思考起。</p><p>假设我们只能选一道菜，那么我们应该如何选择呢？显然，选择满意程度最大的那一道菜<code>s0</code>是最优的，并且我们需要验证是否有 <code>s0 &gt; 0</code>，因为如果<code>s0 &lt;= 0</code>我们选择这道菜不会有任何受益。</p><p>现在我们可以再多选一道菜，也就是两道菜，那么我们应该如何选择呢？假设我们选择了<code>s1</code>这道菜，那么满意程度的总和为<code>s1 + 2s0</code>，由于<code>s0</code> 是满意程度最大的那道菜，我们要最大化上述表达式的值，就应该找到尽可能大的<code>s1</code>。因此在最优的情况下，我们选择满意程度次大的那一道菜作为<code>s1</code>，并且需要保证选择之后的收益多于选择之前的收益，即<code>s1 + 2s0 &gt; s0</code>，也就是只要满足<code>s1 + s0 &gt; 0</code>，我们就可以选择<code>s1</code>。</p><p>对于第三道菜也是如此，我们如果要选择<code>s2</code>，就应该选择满意程度第三大的那一道菜作为<code>s2</code>，同时要保证收益的增加，即</p><p><code>s2 + 2s1 + 3s0 &gt; s1 + 2s0</code>，也就是当<code>s2 + s1 + s0 &gt; 0</code>时，我们就可以选择<code>s2</code>。</p><p>因此我们就有了一个贪心的大致思路：</p><ul><li><p>我们将所有菜的满意程度从大到小排序；</p></li><li><p>我们按照排好序的顺序依次遍历这些菜，对于当前遍历到的菜<code>si</code> ，如果它与之前选择的所有菜的满意程度之和大于 0，我们就选择这道菜，否则可以直接退出遍历的循环。这是因为如果<code>si</code>与之前选择的所有菜的满意程度之和已经小于等于 0 了，那么后面的菜比<code>si</code>的满意程度还要小，就更不可能得到一个大于 0 的和了。</p></li></ul><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>跟使用的排序算法有关</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSatisfaction</span><span class="params">(self, satisfaction: List[int])</span> -&gt; int:</span></span><br><span class="line">        satisfaction.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        presum, ans = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> si <span class="keyword">in</span> satisfaction:</span><br><span class="line">            <span class="keyword">if</span> presum + si &gt; <span class="number">0</span>:</span><br><span class="line">                presum += si</span><br><span class="line">                ans += presum</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><blockquote><p>以上<code>解题思路</code>和<code>代码</code>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reducing-dishes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reducing-dishes</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/reducing-dishes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;做菜顺序&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Linux之用户态与内核态</title>
    <link href="http://changsk.top/2020/07/10/linux-user-kernel/"/>
    <id>http://changsk.top/2020/07/10/linux-user-kernel/</id>
    <published>2020-07-10T15:50:40.000Z</published>
    <updated>2020-07-11T14:59:19.099Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://www.cnblogs.com/bakari/p/5520860.html" target="_blank" rel="noopener">Linux探秘之用户态与内核态</a></p><a id="more"></a><h2 id="一、-Unix-Linux的体系架构"><a href="#一、-Unix-Linux的体系架构" class="headerlink" title="一、 Unix/Linux的体系架构"></a>一、 <strong>Unix/Linux的体系架构</strong></h2><p><img src="1.png" alt="img"></p><p>　　如上图所示，从宏观上来看，Linux操作系统的体系架构分为<strong>用户态</strong>和<strong>内核态</strong>（或者用户空间和内核）。内核从本质上看是一种软件——<strong>控制计算机的硬件资源，并提供上层应用程序运行的环境</strong>。<strong>用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括CPU资源、存储资源、I/O资源等</strong>。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即<strong>系统调用</strong>。</p><p>　　系统调用是操作系统的最小功能单位，这些系统调用根据不同的应用场景可以进行扩展和裁剪，现在各种版本的Unix实现都提供了不同数量的系统调用，如Linux的不同版本提供了240~260个系统调用，FreeBSD大约提供了320个（reference：UNIX环境高级编程）。我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用，我觉得这个比喻非常贴切。因此，有时候如果要实现一个完整的汉字，就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。<strong>库函数</strong>正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它<strong>实现对系统调用的封装</strong>，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。显然，这样的库函数依据不同的标准也可以有不同的实现版本，如ISO C 标准库，POSIX标准库等。</p><p>　　<strong>Shell是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色</strong>，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。同时，Shell是可编程的，它可以执行符合Shell语法的文本，这样的文本称为Shell脚本，通常短短的几行Shell脚本就可以实现一个非常大的功能，原因就是这些<strong>Shell语句通常都对系统调用做了一层封装</strong>。为了方便用户和系统交互，一般，一个Shell对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给shell进行分析解释，然后执行。</p><p>总结一下，用户态的应用程序可以通过三种方式来访问内核态的资源：</p><ul><li>系统调用</li><li>库函数</li><li>Shell脚本</li></ul><p>　　下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。主要表现为：<strong>向下控制硬件资源，向内管理操作系统资源</strong>：包括<strong>进程</strong>的调度和管理、<strong>内存</strong>的管理、<strong>文件系统</strong>的管理、<strong>设备驱动程序</strong>的管理以及<strong>网络资源</strong>的管理，<strong>向上则向应用程序提供系统调用的接口</strong>。从整体上来看，整个操作系统分为两层：用户态和内核态，这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，<strong>带来一定的安全性</strong>。</p><p><img src="2.jpg" alt="img"></p><h2 id="二、用户态和内核态的切换"><a href="#二、用户态和内核态的切换" class="headerlink" title="二、用户态和内核态的切换"></a><strong>二、用户态和内核态的切换</strong></h2><p>　　因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能<strong>造成资源访问的冲突</strong>。所以，为了减少有限资源的访问和使用冲突，Unix/Linux的设计哲学之一就是：<strong>对不同的操作赋予不同的执行等级，就是所谓特权的概念</strong>。简单说就是有多大能力做多大的事，<strong>与系统相关的一些特别关键的操作必须由最高特权的程序来完成</strong>。Intel的X86架构的CPU提供了0到3四个特权级，数字越小，特权越高，<strong>Linux操作系统中主要采用了0和3两个特权级，分别对应的就是内核态和用户态</strong>。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。<strong>比如C函数库中的内存分配函数malloc()，它具体是使用sbrk()系统调用来分配内存，当malloc调用sbrk()的时候就涉及一次从用户态到内核态的切换，类似的函数还有printf()，调用的是wirte()系统调用来输出字符串</strong>，等等。</p><p><img src="3.gif" alt="img"></p><p>到底在什么情况下会发生从用户态到内核态的切换，一般存在以下三种情况：</p><p>1）当然就是<strong>系统调用</strong>：原因如上的分析。</p><p>2）<strong>异常事件</strong>： 当CPU正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如<strong>缺页异常</strong>。</p><p>3）外围设备的中断：<strong>当外围设备完成用户的请求操作后，会向CPU发出中断信号，此时，CPU就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。</strong></p><p>注意：<strong>系统调用的本质其实也是中断，相对于外围设备的硬中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，如Linux int 80h中断。</strong>所以，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，<strong>系统调用是进程主动请求切换的，而异常和硬中断则是被动的。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;https://www.cnblogs.com/bakari/p/5520860.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux探秘之用户态与内核态&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://changsk.top/categories/Linux/"/>
    
    
      <category term="用户态" scheme="http://changsk.top/tags/%E7%94%A8%E6%88%B7%E6%80%81/"/>
    
      <category term="内核态" scheme="http://changsk.top/tags/%E5%86%85%E6%A0%B8%E6%80%81/"/>
    
      <category term="Linux" scheme="http://changsk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-826:most-profit-assigning-work(安排工作以达到最大收益)</title>
    <link href="http://changsk.top/2020/07/05/leetcode-826/"/>
    <id>http://changsk.top/2020/07/05/leetcode-826/</id>
    <published>2020-07-04T16:04:55.000Z</published>
    <updated>2020-07-04T16:38:37.296Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/most-profit-assigning-work/" target="_blank" rel="noopener">most-profit-assigning-work</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：中等</p></blockquote><p>有一些工作：<code>difficulty[i]</code>表示第i个工作的难度，<code>profit[i]</code>表示第i个工作的收益。</p><p>现在我们有一些工人。<code>worker[i]</code>是第i个工人的能力，即该工人只能完成难度小于等于worker[i]的工作。</p><p>每一个工人都最多只能安排一个工作，但是一个工作可以完成多次。</p><p>举个例子，如果3个工人都尝试完成一份报酬为1的同样工作，那么总收益为 $3。如果一个工人不能完成任何工作，他的收益为 $0 。</p><p>我们能得到的最大收益是多少？</p><p><strong>示例：</strong></p><p>输入: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]<br>输出: 100<br>解释: 工人被分配的工作难度是 [4,4,6,6] ，分别获得 [20,20,30,30] 的收益。<br><strong>提示:</strong></p><p>1 &lt;= difficulty.length = profit.length &lt;= 10000<br>1 &lt;= worker.length &lt;= 10000<br>difficulty[i], profit[i], worker[i]  的范围是 [1, 10^5]</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>参考：<a href="https://leetcode-cn.com/problems/most-profit-assigning-work/solution/gong-zuo-he-gong-ren-an-zhao-gong-zuo-nan-du-yi-qi/" target="_blank" rel="noopener">力扣</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> difficulty;</span><br><span class="line">    <span class="keyword">int</span> profit;</span><br><span class="line">&#125;Work;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((Work *)a)-&gt;difficulty - ((Work *)b)-&gt;difficulty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfitAssignment</span><span class="params">(<span class="keyword">int</span>* difficulty, <span class="keyword">int</span> difficultySize, <span class="keyword">int</span>* profit, <span class="keyword">int</span> profitSize, <span class="keyword">int</span>* worker, <span class="keyword">int</span> workerSize)</span></span>&#123;</span><br><span class="line">    Work work[<span class="number">20000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> workNum = difficultySize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; difficultySize; i++) &#123;</span><br><span class="line">        work[i].difficulty = difficulty[i];</span><br><span class="line">        work[i].profit = profit[i]; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workerSize; i++) &#123;</span><br><span class="line">        work[workNum++].difficulty = worker[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    qsort(work, workNum, <span class="keyword">sizeof</span>(Work), comp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workNum; i++) &#123;</span><br><span class="line">        <span class="comment">/* 说明word[i]是工人，此时的maxProfit是这个工人最大的利润 */</span></span><br><span class="line">        <span class="keyword">if</span> (work[i].profit == <span class="number">0</span>) &#123;</span><br><span class="line">            result += maxProfit;</span><br><span class="line">            <span class="keyword">continue</span>; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (work[i].profit &gt; maxProfit) &#123;</span><br><span class="line">            maxProfit = work[i].profit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/most-profit-assigning-work/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;most-profit-assigning-work&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-417:pacific-atlantic-water-flow(太平洋大西洋水流问题)</title>
    <link href="http://changsk.top/2020/07/03/leetcode-417/"/>
    <id>http://changsk.top/2020/07/03/leetcode-417/</id>
    <published>2020-07-02T16:19:25.000Z</published>
    <updated>2020-07-04T16:06:50.706Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/" target="_blank" rel="noopener">太平洋大西洋水流问题</a></p><p>pacific-atlantic-water-flow</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：中等</p></blockquote><p>给定一个 <code>m x n</code> 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。</p><p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p><p>请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。</p><p><strong>提示：</strong></p><p>输出坐标的顺序不重要<br>m 和 n 都小于150</p><p><strong>示例：</strong></p><p>给定下面的 5x5 矩阵:</p><p><img src="1.jpg" alt></p><p>返回:</p><blockquote><p>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>参考：<a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/solution/shen-du-sou-suo-dfs-by-jawhiow/" target="_blank" rel="noopener">力扣</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] direction = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">in_area</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= x &amp;&amp; x &lt; m &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[][] tmp)</span></span>&#123;</span><br><span class="line">        tmp[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] d : direction) &#123;</span><br><span class="line">            <span class="keyword">int</span> newx = x + d[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> newy = y + d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!in_area(newx, newy) || matrix[x][y] &gt; matrix[newx][newy] || tmp[newx][newy] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(matrix, newx, newy, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        m = matrix.length;</span><br><span class="line">        n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] po = <span class="keyword">new</span> <span class="keyword">int</span>[m][n], ao = <span class="keyword">new</span> <span class="keyword">int</span>[m][n]; <span class="comment">//po 太平洋，ao 大西洋</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            dfs(matrix, <span class="number">0</span>, i, po);</span><br><span class="line">            dfs(matrix, m - <span class="number">1</span>, i, ao);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            dfs(matrix, i, <span class="number">0</span>, po);</span><br><span class="line">            dfs(matrix, i, n - <span class="number">1</span>, ao);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (po[i][j] == <span class="number">1</span> &amp;&amp; ao[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    ans.add(Arrays.asList(i, j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/pacific-atlantic-water-flow/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;太平洋大西洋水流问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pacific-atlantic-water-flow&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>iptables1</title>
    <link href="http://changsk.top/2020/07/02/iptables1/"/>
    <id>http://changsk.top/2020/07/02/iptables1/</id>
    <published>2020-07-02T15:53:16.000Z</published>
    <updated>2020-07-02T15:53:16.899Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell编程基础</title>
    <link href="http://changsk.top/2020/06/27/shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://changsk.top/2020/06/27/shell编程基础/</id>
    <published>2020-06-27T12:36:28.000Z</published>
    <updated>2020-06-27T14:57:48.741Z</updated>
    
    <content type="html"><![CDATA[<p>shell编程基础——笔记</p><a id="more"></a><ol><li><p><strong>#!/bin/bash</strong><br> 位于第一行。此行称为 <strong>shebang</strong>（就是 sharp (#) + bang (!) 的意思），会指引操作系统使用接下来指定的程序运行此文件。此处 /bin/bash 执行我们的文件。</p></li><li><p>如果直接要执行该脚本，必须先使其具有可执行属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x filename</span><br></pre></td></tr></table></figure><p>此后在该脚本所在目录下，输入 ./filename 即可执行该脚本。 </p></li><li><p>Shell 编程中，使用变量无需事先声明。变量名的命名遵守正则表达式[a-zA-Z_][a-zA-Z0-9_]+，也就是由大小写字母数字和下划线组成，且不能以数字开头。<br>赋值时等号左右不能有空格。 要取用一个变量的值，只需在变量名前面加一个 $</p></li><li><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"A is: <span class="variable">$a</span>"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Shell 变量默认都是字符串</strong></p></li><li><p>bash 里面可以用 <strong>(( ))</strong> 执行 C 风格的算术表达式，如下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var=0</span><br><span class="line">(( var++ )) </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure></li><li><p>if (<strong>“[” 右边空一格，“]” 左边空一格</strong> )</p><blockquote><p>if<br>   判断命令，可以有很多个，真假取最后的返回值<br> then<br>   如果前述为真做什么<br> [ # 方括号代表可选，别真打进去了！<br> elif<br>   可以再来个判断，如果签名为假继续尝试这里<br> then<br>   如果前述为真做什么 ]<br> else<br>   如果全都不行做什么<br> fi # 结束，就是倒写的 if 啦。</p></blockquote><p> 如下：<br> <code>-f &quot;filename&quot;</code></p><pre><code>判断是否是一个文件</code></pre><p> <code>-r &quot;filename&quot;</code></p><pre><code>判断是否存在且可读</code></pre><p> <code>-w &quot;filename&quot;</code></p><pre><code>判断是否存在且可写</code></pre><p> <code>-x &quot;/bin/ls&quot;</code></p><pre><code>判断/bin/ls是否存在并有可执行权限</code></pre><p> <code>-n &quot;$var&quot;</code></p><pre><code>判断 $var 变量是否有值</code></pre><p><code>&quot;$a&quot; == &quot;$b&quot;</code></p><pre><code>判断$a和$b是否相等</code></pre></li><li><p>&amp;&amp; ||<br> <code>[ -f &quot;/etc/shadow&quot; ] &amp;&amp; echo &quot;This computer uses shadow passwords&quot;</code><br> 上述脚本表示如果/etc/shadow文件存在，则打印“This computer uses shadow passwords”。<br>​<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">mailfolder=/var/spool/mail/james</span><br><span class="line">[ -r <span class="string">"<span class="variable">$mailfolder</span>"</span> ] || &#123; <span class="built_in">echo</span> <span class="string">"Can not read <span class="variable">$mailfolder</span>"</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$mailfolder</span> has mail from:"</span></span><br><span class="line">grep <span class="string">"^From "</span> <span class="variable">$mailfolder</span></span><br></pre></td></tr></table></figure></p><p>该脚本首先判断mailfolder是否可读，如果可读则打印该文件中以”From”开头的行。如果不可读则或操作生效，打印错误信息后脚本退出。</p></li><li><p><strong>$( )与` `</strong>（反引号）都是用来作命令替换的。命令替换与变量替换差不多，都是用来重组命令行的，先完成引号里的命令行，然后将其结果替换出来，再重组成新的命令行。<br> 如：<br>​<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> today is $(date <span class="string">"+%Y-%m-%d"</span>)</span><br><span class="line">today is 2020-06-27</span><br></pre></td></tr></table></figure></p><p>$( )与｀｀：</p><p>在操作上，这两者都是达到相应的效果，但是建议使用$( )，理由如下：</p></li><li><p>｀｀很容易与’’搞混乱，尤其对初学者来说。</p></li><li><p>$( )比较直观。</p></li></ol><p>$( )的弊端是，并不是所有的类unix系统都支持这种方式，但反引号是肯定支持的。</p><ol start="10"><li>case 语句<br>case表达式可以用来匹配一个给定的字符串，而不是数字（可别和C语言里的switch…case混淆）。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ... <span class="keyword">in</span></span><br><span class="line">...) <span class="keyword">do</span> something here </span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>file命令可以辨别出一个给定文件的文件类型</strong>，如：file lf.gz，其输出结果为：</p><blockquote><p>lf.gz: gzip compressed data, deflated, original filename,<br>last modified: Mon Aug 27 23:09:18 2001, os: Unix</p></blockquote><p>可以利用这点写了一个名为smartzip的脚本，该脚本可以自动解压bzip2, gzip和zip 类型的压缩文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ftype=<span class="string">"<span class="variable">$(file "$1")</span>"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$ftype</span>"</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"<span class="variable">$1</span>: Zip archive"</span>*)   <span class="comment"># *:代表『 0 个或无穷多个』任意字符</span></span><br><span class="line">   unzip <span class="string">"<span class="variable">$1</span>"</span> ;;</span><br><span class="line"><span class="string">"<span class="variable">$1</span>: gzip compressed"</span>*)</span><br><span class="line">   gunzip <span class="string">"<span class="variable">$1</span>"</span> ;;</span><br><span class="line"><span class="string">"<span class="variable">$1</span>: bzip2 compressed"</span>*)</span><br><span class="line">   bunzip2 <span class="string">"<span class="variable">$1</span>"</span> ;;</span><br><span class="line">*)</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"File <span class="variable">$1</span> can not be uncompressed with smartzip"</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>你可能注意到上面使用了一个特殊变量 $1，该变量包含有传递给该脚本的第一个参数值。也就是说，当我们运行：smartzip articles.zip</p><p>$1 就是字符串 articles.zip。 </p><ol start="11"><li>select 循环语句:select 循环语句是bash的一种扩展应用，擅长于交互式场合。<br>下面是一个简单的示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"What is your favourite OS?"</span></span><br><span class="line"> select var <span class="keyword">in</span> <span class="string">"Linux"</span> <span class="string">"Gnu Hurd"</span> <span class="string">"Free BSD"</span> <span class="string">"Other"</span>; <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">break</span>;</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"You have selected <span class="variable">$var</span>"</span></span><br></pre></td></tr></table></figure></li></ol><p>该脚本的运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">What is your favourite OS?</span><br><span class="line">1) Linux</span><br><span class="line">2) Gnu Hurd</span><br><span class="line">3) Free BSD</span><br><span class="line">4) Other</span><br><span class="line"><span class="comment">#? 1</span></span><br><span class="line">You have selected Linux</span><br></pre></td></tr></table></figure><ol start="12"><li>while/for 循环<br>在shell中，可以使用如下循环：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ...; <span class="keyword">do</span></span><br><span class="line">   ....</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ol><p>只要测试表达式条件为真，则while循环将一直运行。关键字”break”用来跳出循环，而关键字”continue”则可以跳过一个循环的余下部分，直接跳到下一次循环中。<br>    for循环会查看一个字符串列表（字符串用空格分隔），并将其赋给一个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> ....; <span class="keyword">do</span></span><br><span class="line">   ....</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>下面的示例会把A B C分别打印到屏幕上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> A B C ; <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"var is <span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="13"><li><p>$</p><blockquote><p>$# 是传给脚本的参数个数<br>$0 是脚本本身的名字<br>$1 是传递给该shell脚本的第一个参数<br>$2 是传递给该shell脚本的第二个参数<br>$@ 是传给脚本的所有参数的列表<br>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个<br>$$ 是脚本运行的当前进程ID号<br>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</p></blockquote></li><li><p>Shell里的一些特殊符号<br>引号</p><p>在向程序传递任何参数之前，程序会扩展通配符和变量。这里所谓的扩展是指程序会把通配符（比如*）替换成适当的文件名，把变量替换成变量值。我们可以使用引号来防止这种扩展，先来看一个例子，假设在当前目录下有两个jpg文件：      mail.jpg和tux.jpg。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> *.jpg   <span class="comment"># =&gt; mail.jpg tux.jpg</span></span><br></pre></td></tr></table></figure><p>引号（单引号和双引号）可以防止通配符*的扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*.jpg"</span>  <span class="comment"># =&gt; *.jpg</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'*.jpg'</span>  <span class="comment"># =&gt; *.jpg</span></span><br></pre></td></tr></table></figure><p>其中单引号更严格一些，它可以防止任何变量扩展；而双引号可以防止通配符扩展但允许变量扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span>   <span class="comment"># =&gt; /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$SHELL</span>"</span> <span class="comment"># =&gt; /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'$SHELL'</span> <span class="comment"># =&gt; $SHELL</span></span><br></pre></td></tr></table></figure><p>此外还有一种防止这种扩展的方法，即使用转义字符——反斜杠\：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \*.jpg   <span class="comment"># =&gt; *.jpg</span></span><br><span class="line"><span class="built_in">echo</span> \<span class="variable">$SHELL</span>  <span class="comment"># =&gt; $SHELL</span></span><br></pre></td></tr></table></figure><ol start="15"><li><p>Here Document</p><p>当要将几行文字传递给一个命令时，用here document是一种不错的方法。对每个脚本写一段帮助性的文字是很有用的，此时如果使用here document就不必用echo函数一行行输出。Here document以 &lt;&lt; 开头，后面接上一个字符串，这个字符串还必须出现在here document的末尾。下面是一个例子，在该例子中，我们对多个文件进行重命名，并且使用here document打印帮助：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#we have less than 3 arguments. Print the help text:</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 3 ] ;; <span class="keyword">then</span></span><br><span class="line">cat &lt;&lt; HELP</span><br><span class="line">ren -- renames a number of files using sed regular expressions USAGE: ren <span class="string">'regexp'</span> <span class="string">'replacement'</span> files...</span><br><span class="line">EXAMPLE: rename all *.HTM files <span class="keyword">in</span> *.html:</span><br><span class="line">   ren <span class="string">'HTM$'</span> <span class="string">'html'</span> *.HTM</span><br><span class="line">HELP                <span class="comment">#这里HELP要顶格写，前面不能有空格或者TAB制表符。如果cat一行写成cat &amp;lt;&amp;lt; -HELP，前边可以带TAB.</span></span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">OLD=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">NEW=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"><span class="comment">#The shift command removes one argument from the list of</span></span><br><span class="line"><span class="comment">#command line arguments.</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="comment">#$@ contains now all the files:</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$file</span>"</span> ]&amp;nbsp;; <span class="keyword">then</span></span><br><span class="line">      newfile=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span>"</span> | sed <span class="string">"s/<span class="variable">$&#123;OLD&#125;</span>/<span class="variable">$&#123;NEW&#125;</span>/g"</span>`</span><br><span class="line">      <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$newfile</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">　　　　   <span class="built_in">echo</span> <span class="string">"ERROR: <span class="variable">$newfile</span> exists already"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"renaming <span class="variable">$file</span> to <span class="variable">$newfile</span> ..."</span></span><br><span class="line"> mv <span class="string">"<span class="variable">$file</span>"</span> <span class="string">"<span class="variable">$newfile</span>"</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例有点复杂，我们需要多花点时间来说明一番。第一个if表达式判断输入命令行参数是否小于3个 (特殊变量$# 表示包含参数的个数) 。如果输入参数小于3个，则将帮助文字传递给cat命令，然后由cat命令将其打印在屏幕上。打印帮助文字后程序退出。如果输入参数等于或大于3个，我们就将第一个参数赋值给变量OLD，第二个参数赋值给变量NEW。下一步，我们使用shift命令将第一个和第二个参数从参数列表中删除，这样原来的第三个参数就成为参数列表$*的第一个参数。然后我们开始循环，命令行参数列表被一个接一个地被赋值给变量$file。接着我们判断该文件是否存在，如果存在则通过sed命令搜索和替换来产生新的文件名。然后将反短斜线内命令结果赋值给newfile。这样我们就达到了目的：得到了旧文件名和新文件名。然后使用 mv命令进行重命名 </p><p>16.Shell里的函数</p><p>如果你写过比较复杂的脚本，就会发现可能在几个地方使用了相同的代码，这时如果用上函数，会方便很多。函数没有必要声明。只要在执行之前出现定义就行</p><p>下面是一个名为xtitlebar的脚本，它可以改变终端窗口的名称。这里使用了一个名为help的函数，该函数在脚本中使用了两次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>()</span><br><span class="line">&#123;</span><br><span class="line">cat &lt;&lt; HELP</span><br><span class="line">xtitlebar -- change the name of an xterm, gnome-terminal or kde konsole</span><br><span class="line">USAGE: xtitlebar [-h] <span class="string">"string_for_titelbar"</span></span><br><span class="line">OPTIONS: -h <span class="built_in">help</span> text</span><br><span class="line">EXAMPLE: xtitlebar <span class="string">"cvs"</span></span><br><span class="line">HELP</span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># in case of error or if -h is given we call the function help:</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$1</span> == <span class="string">''</span> || <span class="variable">$1</span> == <span class="string">'-h'</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">help</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># send the escape sequence to change the xterm titelbar:</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033]0;<span class="variable">$1</span>\007"</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>在脚本中提供帮助是一种很好的编程习惯，可以方便其他用户（和自己）使用和理解脚本。 </p><ol start="17"><li><p>命令行参数</p><p>我们已经见过 $* 和 $1, $2 … $9 等特殊变量，这些特殊变量包含了用户从命令行输入的参数。迄今为止，我们仅仅了解了一些简单的命令行语法（比如一些强制性的参数和查看帮助的-h选项）。但是在编写更复杂的程序时，您可能会发现您需要更多的自定义的选项。通常的惯例是在所有可选的参数之前加一个减号，后面再加上参数值 (比如文件名)。</p><p>有好多方法可以实现对输入参数的分析，但是下面的使用case表达式的例子无疑是一个不错的方法。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>()</span><br><span class="line">&#123;</span><br><span class="line">   cat &lt;&lt; HELP</span><br><span class="line">   This is a generic <span class="built_in">command</span> line parser demo.</span><br><span class="line">   USAGE EXAMPLE: cmdparser -l hello -f -- -somefile1 somefile2</span><br><span class="line">HELP</span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">   -h) <span class="built_in">help</span>;<span class="built_in">shift</span> 1;; <span class="comment"># function help is called</span></span><br><span class="line">   -f) opt_f=1;<span class="built_in">shift</span> 1;; <span class="comment"># variable opt_f is set</span></span><br><span class="line">   -l) opt_l=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;; <span class="comment"># -l takes an argument -&amp;gt; shift by 2</span></span><br><span class="line">   --) <span class="built_in">shift</span>;<span class="built_in">break</span>;; <span class="comment"># end of options</span></span><br><span class="line">   -*) <span class="built_in">echo</span> <span class="string">"error: no such option <span class="variable">$1</span>. -h for help"</span>;<span class="built_in">exit</span> 1;;</span><br><span class="line">   *) <span class="built_in">break</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"opt_f is <span class="variable">$opt_f</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"opt_l is <span class="variable">$opt_l</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"first arg is <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2nd arg is <span class="variable">$2</span>"</span></span><br></pre></td></tr></table></figure><p>你可以这样运行该脚本：</p><pre><code>cmdparser -l hello -f -- -somefile1 somefile2</code></pre><p>返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opt_f is 1</span><br><span class="line">opt_l is hello</span><br><span class="line">first arg is -somefile1</span><br><span class="line">2nd arg is somefile2</span><br></pre></td></tr></table></figure><p>这个脚本是如何工作的呢？脚本首先在所有输入命令行参数中进行循环，将输入参数与case表达式进行比较，如果匹配则设置一个变量并且移除该参数。根据unix系统的惯例，首先输入的应该是包含减号的参数。 </p><ol start="18"><li>脚本调试<br><code>sh -x strangescript</code>:上述命令会执行该脚本，同时显示所有变量的值。<br><code>sh -n your_script</code>:返回所有语法错误,执行脚本只检查语法。 </li></ol><blockquote><p>参考：<a href="https://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">Shell编程基础</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell编程基础——笔记&lt;/p&gt;
    
    </summary>
    
      <category term="shell" scheme="http://changsk.top/categories/shell/"/>
    
    
      <category term="shell" scheme="http://changsk.top/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Cmake实践-笔记</title>
    <link href="http://changsk.top/2020/06/25/cmake%E5%AE%9E%E8%B7%B5-%E7%AC%94%E8%AE%B0/"/>
    <id>http://changsk.top/2020/06/25/cmake实践-笔记/</id>
    <published>2020-06-25T11:01:28.000Z</published>
    <updated>2020-06-27T03:22:19.581Z</updated>
    
    <content type="html"><![CDATA[<p>《<strong>Cmake 实践</strong>》笔记</p><a id="more"></a><ol><li><p>Cmake特点</p><blockquote><p>1，开放源代码，使用类 BSD 许可发布。<br>2，跨平台，并可生成 native 编译配置文件，在 Linux/Unix 平台，生成 makefile，在<br>苹果平台，可以生成 xcode，在 Windows 平台，可以生成 MSVC 的工程文件。<br>3，能够很好的管理大型项目。<br>4，简化编译构建过程和编译过程。Cmake 的工具链非常简单：cmake+make。<br>5，高效虑。<br>6，可扩展，可以为 cmake 编写特定功能的模块，扩充 cmake 功能。</p></blockquote></li><li><p><code>make VERBOSE=1</code>： make 构建的详细过程</p></li><li><p><code>CMakeLists.txt</code>：文件是 cmake 的构建定义文件，文件名是大小写相关的，如果工程存在多个目录，需要确保每个要管理的目录都存在一个CMakeLists.txt。</p></li><li><p><code>PROJECT(projectname [CXX] [C] [Java])</code><br>可以用这个指令定义工程名称，并可指定工程支持的语言，支持的语言列表是可以忽略的，<br>默认情况表示支持所有语言。这个指令隐式的定义了两个 cmake 变量:<br><projectname>_BINARY_DIR 以及<projectname>_SOURCE_DIR（如果是内部编译，两个变量目前指的都是工程所在路径）。同时 cmake 系统也帮助我们预定义了 PROJECT_BINARY_DIR 和 PROJECT_SOURCE_DIR变量，他们的值分别跟 <projectname>_BINARY_DIR 和<projectname>_SOURCE_DIR 一致。</projectname></projectname></projectname></projectname></p></li><li><p><code>SET</code>：SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</p><p>如果有多个源文件，也可以定义成：SET(SRC_LIST main.c t1.c t2.c)。</p></li><li><p><code>MESSAGE</code>：MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] “message to display” …)<br>这个指令用于向终端输出用户定义的信息，包含了三种类型:</p><ul><li>SEND_ERROR，产生错误，生成过程被跳过。</li><li>SATUS ，输出前缀为 -的信息。</li><li>FATAL_ERROR，立即终止所有 cmake 过程.</li></ul></li><li><p><code>ADD_EXECUTABLE</code>：ADD_EXECUTABLE(hello ${SRC_LIST})：定义了这个工程会生成一个文件名为 hello 的可执行文件，相关的源文件是 SRC_LIST 中定义的源文件列表</p><blockquote><p>注意：如在 IF 控制语句，变量是直接使用变量名引用，而不需要${}</p></blockquote></li><li><p>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</p></li><li><p>指令是大小写无关的，参数和变量是大小写相关的。推荐全部使用大写指令。</p></li><li><p>cmake 的语法还是比较灵活而且考虑到各种情况，比如SET(SRC_LIST main.c)也可以写成 SET(SRC_LIST “main.c”)是没有区别的，但是假设一个源文件的文件名是 fu nc.c(文件名中间包含了空格)。这时候就必须使用双引号，如果写成了 SET(SRC_LIST fu nc.c)，就会出现错误，提示你找不到 fu 文件和 nc.c 文件。这种情况，就必须写成:SET(SRC_LIST “fu nc.c”)</p></li><li><p>可以忽略掉 source 列表中的源文件后缀，比如可以写成ADD_EXECUTABLE(t1 main)，cmake 会自动的在本目录查找 main.c 或者 main.cpp等，当然，最好不要偷这个懒</p></li><li><p>同时参数也可以使用分号来进行分割。下面的例子也是合法的：<br>ADD_EXECUTABLE(t1 main.c t1.c)可以写成 ADD_EXECUTABLE(t1 main.c;t1.c).<br>注意在编写 CMakeLists.txt 时注意形成统一的风格即可。</p></li><li><p><code>make clean</code>：清理工程</p></li><li><p>out-of-source外部构建：，对于原有的工程没有任何影响，所有动作全部发生在编译目录</p><blockquote><p>mkdir build</p><p>cd build</p><p>cmake ..</p><p>make</p></blockquote></li></ol><p>注意：通过外部编译进行工程构建，<projectname>_SOURCE_DIR 仍然指代工程路径，如/backup/cmake/t1<br>而 <projectname>_BINARY_DIR 则指代编译路径，如/backup/cmake/t1/build</projectname></projectname></p><ol start="15"><li><p><code>ADD_SUBDIRECTORY</code>：ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除，比如，工程的 example，可能就需要工程构建完成后，再进入 example 目录单独进行构建。</p><p>ADD_SUBDIRECTORY(src bin)：将 src 子目录加入工程，并指定编译输出(包含编译中间结果)路径为bin 目录。如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build/src 目录(这个目录跟原有的 src 目录对应)，指定 bin 目录后，相当于在编译时将 src 重命名为 bin，所有的中间结果和目标二进制都将存放在 bin 目录。</p></li><li><p>SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)：指定可执行二进制的输出路径<br>SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)：指定lib库的输出路径</p><blockquote><p>在哪里 ADD_EXECUTABLE 或 ADD_LIBRARY，如果需要改变目标存放路径，就在哪里加入上述的定义。</p></blockquote></li><li><p>安装：</p><p>make install：将 hello 直接安装到/usr/bin 目录<br>make install DESTDIR=/tmp/test ：安装在/tmp/test/usr/bin 目录<br>CMAKE_INSTALL_PREFIX：cmake -DCMAKE_INSTALL_PREFIX=/usr ..</p><p>INSTALL：用于定义安装规则，安装的内容可以包括<strong>目标二进制、动态库、静态库以及文件、目录、脚本</strong>等</p><ol><li><p>目标文件的安装：</p><blockquote><p>INSTALL(TARGETS targets…</p><pre><code>  [[ARCHIVE|LIBRARY|RUNTIME]              [DESTINATION &lt;dir&gt;]              [PERMISSIONS permissions...]              [CONFIGURATIONS[Debug|Release|...]]              [COMPONENT &lt;component&gt;]              [OPTIONAL]             ] [...])</code></pre></blockquote><p> 参数中的 TARGETS 后面跟的就是通过 ADD_EXECUTABLE 或者 ADD_LIBRARY 定义的目标文件，可能是可执行二进制、动态库、静态库。目标类型也就相对应的有三种，ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME<br> 特指可执行目标二进制。DESTINATION 定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候<br> CMAKE_INSTALL_PREFIX 其实就无效了。如果你希望使用 CMAKE_INSTALL_PREFIX 来定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;</p><p> 举个简单的例子：</p><blockquote><p>INSTALL(TARGETS myrun mylib mystaticlib<br>RUNTIME DESTINATION bin<br>LIBRARY DESTINATION lib<br>ARCHIVE DESTINATION libstatic<br>) 上面的例子会将：<br> 可执行二进制 myrun 安装到${CMAKE_INSTALL_PREFIX}/bin 目录<br> 动态库 libmylib 安装到${CMAKE_INSTALL_PREFIX}/lib 目录<br> 静态库 libmystaticlib 安装到${CMAKE_INSTALL_PREFIX}/libstatic 目录</p></blockquote></li><li><p>普通文件的安装：</p><blockquote><p>  INSTALL(FILES files… DESTINATION <dir></dir></p><pre><code>[PERMISSIONS permissions...][CONFIGURATIONS [Debug|Release|...]][COMPONENT &lt;component&gt;][RENAME &lt;name&gt;] [OPTIONAL])</code></pre></blockquote></li></ol><p>可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果<br>默认不定义权限 PERMISSIONS，安装后的权限为：OWNER_WRITE, OWNER_READ,  GROUP_READ,和     WORLD_READ，即 644 权限。</p><p>​         3. 非目标文件的可执行程序安装(比如脚本之类)：</p><pre><code>INSTALL(PROGRAMS files... DESTINATION &lt;dir&gt;     [PERMISSIONS permissions...]     [CONFIGURATIONS [Debug|Release|...]]     [COMPONENT &lt;component&gt;]     [RENAME &lt;name&gt;] [OPTIONAL])</code></pre></li></ol><p>跟上面的 FILES 指令使用方法一样，唯一的不同是安装后权限为:OWNER_EXECUTE, GROUP_EXECUTE, 和 WORLD_EXECUTE，即 755 权限。</p><p>​        4.目录的安装：</p><pre><code>&gt;  INSTALL(DIRECTORY dirs... DESTINATION &lt;dir&gt;&gt;                       [FILE_PERMISSIONS permissions...]&gt;                       [DIRECTORY_PERMISSIONS permissions...]&gt;                       [USE_SOURCE_PERMISSIONS]&gt;                       [CONFIGURATIONS [Debug|Release|...]]&gt;                       [COMPONENT &lt;component&gt;]&gt;                       [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]&gt;                       [EXCLUDE] [PERMISSIONS permissions...]] [...])</code></pre><p> DIRECTORY 后面连接的是所在 Source 目录的相对路径，但务必注意：abc 和 abc/有很大的区别。如果目录名不以/结尾，那么这个目录将被安装为目标路径下的 abc，如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，<strong>但不包括这个目录本身</strong>。PATTERN 用于使用正则表达式进行过滤，PERMISSIONS 用于指定 PATTERN 过滤后的文件权限。</p><ol start="18"><li><p>SET(LIBRARY_OUTPUT_PATH &lt;路径&gt;)：指定lib库输出路径</p></li><li><p>ADD_LIBRARY</p><blockquote><p>ADD_LIBRARY</p><pre><code>ADD_LIBRARY(libname    [SHARED|STATIC|MODULE]  [EXCLUDE_FROM_ALL]        source1 source2 ... sourceN)</code></pre></blockquote><p>不需要写全 libhello.so，只需要填写 hello 即可，cmake 系统会自动生成 libhello.X</p><p>类型有三种:<br>SHARED，动态库<br>STATIC，静态库<br>MODULE，在使用 dyld 的系统有效，如果不支持 dyld，则被当作 SHARED 对待。<br>EXCLUDE_FROM_ALL 参数的意思是这个库不会被默认构建，除非有其他的组件依赖或者手工构建。</p></li><li><p>SET_TARGET_PROPERTIES(target1 target2 …</p><pre><code>PROPERTIES prop1 value1prop2 value2 ...)</code></pre><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本。</p><p>如：SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME “hello”) 指定静态库hello_static的输出路径为“hello”</p><p>GET_TARGET_PROPERTY(OUTPUT_VALUE hello_static OUTPUT_NAME)</p></li><li><p>cmake 在构建一个新的 target 时，会尝试清理掉其他使用这个名字的库，如在构建 libhello.a 时，就会清理掉 libhello.so.为了回避这个问题，比如再次使用 SET_TARGET_PROPERTIES 定义CLEAN_DIRECT_OUTPUT属性。向 CMakeLists.txt 中添加:<br>SET_TARGET_PROPERTIES(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1)<br>SET_TARGET_PROPERTIES(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)</p></li><li><p>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)<br>VERSION 指代动态库版本，SOVERSION 指代 API 版本。</p></li><li><p>INCLUDE_DIRECTORIES([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)：这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面，你可以通过两种方式来进行控制搜索路径添加的方式：<br>１，CMAKE_INCLUDE_DIRECTORIES_BEFORE，通过 SET 这个 cmake 变量为 on，可以<br>将添加的头文件搜索路径放在已有路径的前面。<br>２，通过 AFTER 或者 BEFORE 参数，也可以控制是追加还是置前。</p></li><li><p>为 target 添加共享库：</p><p>LINK_DIRECTORIES(directory1 directory2 …)<br>这个指令非常简单，添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径。</p><p>TARGET_LINK_LIBRARIES(target library1</p><pre><code>&lt;debug | optimized&gt; library2...)</code></pre><p>这个指令可以用来为 target 添加需要链接的共享库，本例中是一个可执行文件，但是同样可以用于为自己编写的共享库添加共享库链接。</p><p>如：TARGET_LINK_LIBRARIES(main hello)，也可以写成TARGET_LINK_LIBRARIES(main libhello.so)</p></li><li><p>查看可执行程序的链接情况：ldd main</p></li><li><p>CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH</p><p><strong>这两个是环境变量而不是 cmake 变量</strong>。使用方法是要在 bash 中用 export 或者在 csh 中使用 set 命令设置或者CMAKE_INCLUDE_PATH=/home/include cmake ..等方式。</p><p>export CMAKE_INCLUDE_PATH=/usr/include/hello<br>然后在头文件中将 INCLUDE_DIRECTORIES(/usr/include/hello)替换为：<br>FIND_PATH(myHeader hello.h)<br>IF(myHeader)<br>INCLUDE_DIRECTORIES(${myHeader})<br>ENDIF(myHeader)</p><p>FIND_PATH 用来在指定路径中搜索文件名，比如：<br>FIND_PATH(myHeader NAMES hello.h PATHS /usr/include /usr/include/hello)<br>这里没有指定路径，但是，cmake 仍然可以找到 hello.h 存放的路径，就是因为我们设置了环境变量 CMAKE_INCLUDE_PATH。如果你不使用 FIND_PATH，CMAKE_INCLUDE_PATH 变量的设置是没有作用的，你不能指望它会直接为编译器命令添加参数-I<cmake_include_path>。</cmake_include_path></p></li><li><p>使用${}进行变量的引用。在 IF 等语句中，是直接使用变量名而不通过${}取值</p></li><li><p>cmake 自定义变量的方式：主要有隐式定义和显式定义两种。隐式定义的例子，就是 PROJECT 指令，他<br>会隐式的定义<projectname>_BINARY_DIR 和<projectname>_SOURCE_DIR 两个变量。<br>显式定义的例子,使用 SET 指令，就可以构建一个自定义变量了。</projectname></projectname></p></li><li><p>cmake 常用变量：</p><ol><li>CMAKE_BINARY_DIR、PROJECT_BINARY_DIR、<projectname>_BINARY_DIR，这三个变量指代的内容是一致的，如果是 in source 编译，指得就是工程顶层目录，如果是 out-of-source 编译，指的是工程编译发生的目录。</projectname></li><li>CMAKE_SOURCE_DIR、PROJECT_SOURCE_DIR、<projectname>_SOURCE_DIR，这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。</projectname></li><li>CMAKE_CURRENT_SOURCE_DIR指的是当前处理的 CMakeLists.txt 所在的路径</li><li>CMAKE_CURRRENT_BINARY_DIR，如果是 in-source 编译，它跟 CMAKE_CURRENT_SOURCE_DIR 一致，如果是 out-of-source 编译，则指的是 target 编译目录。使用上面提到的 ADD_SUBDIRECTORY(src bin)可以更改这个变量的值。</li><li>CMAKE_CURRENT_LIST_FILE，输出调用这个变量的 CMakeLists.txt 的完整路径</li><li>CMAKE_CURRENT_LIST_LINE，输出这个变量所在的行</li><li>CMAKE_MODULE_PATH，这个变量用来定义自己的 cmake 模块所在的路径。如果工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随工程发布的，为了让 cmake 在处CMakeLists.txt 时找到这些模块，需要通过 SET 指令，将自己的 cmake 模块路径设置一下。比如SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)，这时候就可以通过 INCLUDE 指令来调用自己的模块了。</li><li>EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH，分别用来重新定义最终可执行二进制文件和库文件的存放目录</li><li>PROJECT_NAME，返回通过 PROJECT 指令定义的项目名称。</li></ol></li><li><p>使用$ENV{NAME}指令就可以调用系统的环境变量了。<br>设置环境变量的方式是：SET(ENV{变量名} 值)</p><p>CMAKE_INCLUDE_CURRENT_DIR：自动添加 CMAKE_CURRENT_BINARY_DIR 和CMAKE_CURRENT_SOURCE_DIR 到当前处理的 CMakeLists.txt。相当于在每个 CMakeLists.txt 加入：<br>INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})<br>CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE：将工程提供的头文件目录始终至于系统头文件目录的前面，当你定义的头文件确实跟系统发生冲突时可以提供一些帮助。</p></li><li><p>系统信息<br>1,CMAKE_MAJOR_VERSION，CMAKE 主版本号<br>2,CMAKE_MINOR_VERSION，CMAKE 次版本号<br>3,CMAKE_PATCH_VERSION，CMAKE 补丁等级<br>4,CMAKE_SYSTEM，系统名称，比如 Linux-2.6.22<br>5,CMAKE_SYSTEM_NAME，不包含版本的系统名，比如 Linux<br>6,CMAKE_SYSTEM_VERSION，系统版本，比如 2.6.22<br>7,CMAKE_SYSTEM_PROCESSOR，处理器名称，比如 i686.<br>8,UNIX，在所有的类 UNIX 平台为 TRUE，包括 OS X 和 cygwin<br>9,WIN32，在所有的 win32 平台为 TRUE，包括 cygwin</p></li><li><p>主要的开关选项：<br>1，CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS，用来控制 IF ELSE 语句的书写方式<br>2，BUILD_SHARED_LIBS：这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY 并没有指定库类型的情况下，默认编译生成的库都是静态库。如果 SET(BUILD_SHARED_LIBS ON)后，默认生成的为动态库。<br>３，CMAKE_C_FLAGS，设置 C 编译选项，也可以通过指令 ADD_DEFINITIONS()添加。<br>4，CMAKE_CXX_FLAGS，设置 C++编译选项，也可以通过指令 ADD_DEFINITIONS()添加。</p></li><li><p>ADD_DEFINITIONS：向 C/C++编译器添加-D 定义，比如:ADD_DEFINITIONS(-DENABLE_DEBUG  -DABC)，参数之间用空格分割。如果代码中定义了#ifdef ENABLE_DEBUG #endif，这个代码块就会生效。如果要添加其他的编译器开关，可以通过 CMAKE_C_FLAGS 变量和 CMAKE_CXX_FLAGS 变量设置。</p><blockquote><p>gcc -D 选项</p><p>D选项是用来在使用gcc/g++编译的时候定义宏的。</p><p>gcc -DDEBUG ：-D 后面直接跟宏命，相当于定义这个宏，默认这个宏的内容是1<br>gcc -DNAME=Peter ：-D 后面跟 key=value 表示定义key这个宏，它的内容是value</p></blockquote></li><li><p>ADD_DEPENDENCIES：定义 target 依赖的其他 target，确保在编译本 target 之前，其他的 target 已经被构<br>建。ADD_DEPENDENCIES(target-name depend-target1 depend-target2 …)</p></li><li><p>ADD_TEST 与 ENABLE_TESTING 指令。<br>ENABLE_TESTING 指令用来控制 Makefile 是否构建 test 目标，涉及工程所有目录。语<br>法很简单，没有任何参数，ENABLE_TESTING()，一般情况这个指令放在工程的主<br>CMakeLists.txt 中.</p><p>ADD_TEST 指令的语法是:<br>ADD_TEST(testname Exename arg1 arg2 …)<br>testname 是自定义的 test 名称，Exename 可以是构建的目标文件也可以是外部脚本等等。后面连接传递给可执行文件的参数。如果没有在同一个 CMakeLists.txt 中打开ENABLE_TESTING()指令，任何 ADD_TEST 都是无效的。</p></li><li><p>AUX_SOURCE_DIRECTORY<br>基本语法是：<br>AUX_SOURCE_DIRECTORY(dir VARIABLE)<br>作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来<br>自动构建源文件列表。因为目前 cmake 还不能自动发现新添加的源文件。比如<br>AUX_SOURCE_DIRECTORY(. SRC_LIST)<br>ADD_EXECUTABLE(main ${SRC_LIST})</p></li><li><p>CMAKE_MINIMUM_REQUIRED<br>其语法为 CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])<br>比如 CMAKE_MINIMUM_REQUIRED(VERSION 2.5 FATAL_ERROR)<br>如果 cmake 版本小与 2.5，则出现严重错误，整个过程中止。</p></li><li><p>EXEC_PROGRAM<br>在 CMakeLists.txt 处理过程中执行命令，并不会在生成的 Makefile 中执行。具体语法为：<br>EXEC_PROGRAM(Executable [directory in which to run]</p><pre><code>[ARGS &lt;arguments to executable&gt;][OUTPUT_VARIABLE &lt;var&gt;][RETURN_VALUE &lt;var&gt;])</code></pre><p>用于在指定的目录运行某个程序，通过 ARGS 添加参数，如果要获取输出和返回值，可通过<br>OUTPUT_VARIABLE 和 RETURN_VALUE 分别定义两个变量.这个指令可以帮助你在 CMakeLists.txt 处理过程中支持任何命令，比如根据系统情况去修改代码文件等等。<br>举个简单的例子，我们要在 src 目录执行 ls 命令，并把结果和返回值存下来。可以直接在 src/CMakeLists.txt 中添加：<br>EXEC_PROGRAM(ls ARGS “<em>.c” OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)<br>IF(not LS_RVALUE)<br>MESSAGE(STATUS “ls result: “ ${LS_OUTPUT})<br>ENDIF(not LS_RVALUE)<br>在 cmake 生成 Makefile 的过程中，就会执行 ls 命令，*</em>如果返回 0，则说明成功执行**，那么就输出 ls *.c 的结果。</p></li><li><p>FILE 指令<br>文件操作指令，基本语法为:</p><pre><code>FILE(WRITE filename &quot;message to write&quot;... )FILE(APPEND filename &quot;message to write&quot;... )FILE(READ filename variable)FILE(GLOB  variable [RELATIVE path] [globbing </code></pre><p>expressions]…)</p><pre><code>FILE(GLOB_RECURSE variable [RELATIVE path]     [globbing expressions]...)FILE(REMOVE [directory]...)FILE(REMOVE_RECURSE [directory]...)FILE(MAKE_DIRECTORY [directory]...)FILE(RELATIVE_PATH variable directory file)FILE(TO_CMAKE_PATH path result)FILE(TO_NATIVE_PATH path result)</code></pre></li><li><p>FIND_系列指令主要包含一下指令：<br>FIND_FILE(<var> name1 path1 path2 …)<br>VAR 变量代表找到的文件全路径，包含文件名<br>FIND_LIBRARY(<var> name1 path1 path2 …)<br>VAR 变量表示找到的库全路径，包含库文件名<br>FIND_PATH(<var> name1 path1 path2 …)<br>VAR 变量代表包含这个文件的路径。<br>FIND_PROGRAM(<var> name1 path1 path2 …)<br>VAR 变量代表包含这个程序的全路径。<br>FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE]</name></var></var></var></var></p><pre><code>[[REQUIRED|COMPONENTS] [componets...]])</code></pre><p>用来调用预定义在 CMAKE_MODULE_PATH 下的 Find<name>.cmake 模块，也可以自己<br>定义 Find<name>模块，通过 SET(CMAKE_MODULE_PATH dir)将其放入工程的某个目录<br>中供工程使用<br>FIND_LIBRARY 示例：<br>FIND_LIBRARY(libX X11 /usr/lib)<br>IF(NOT libX)<br>MESSAGE(FATAL_ERROR “libX not found”)<br>ENDIF(NOT libX)</name></name></p></li><li><p>IF 指令，基本语法为：</p><blockquote><p>​        IF(expression)<br>​          THEN section.<br>​          COMMAND1(ARGS …)          COMMAND2(ARGS …)<br>​          …<br>​        ELSE(expression)<br>​          ELSE section.<br>​          COMMAND1(ARGS …)<br>​          COMMAND2(ARGS …)<br>​          …<br>​        ENDIF(expression)</p></blockquote><p>另外一个指令是 ELSEIF，总体把握一个原则，凡是出现 IF 的地方一定要有对应的ENDIF.出现 ELSEIF 的地方，ENDIF 是可选的。<br>表达式的使用方法如下:<br>IF(var)，如果变量不是：<strong>空，0，N, NO, OFF, FALSE, NOTFOUND 或<var>_NOTFOUND</var></strong> 时，表达式为真。<br>IF(NOT var )，与上述条件相反。<br>IF(var1 AND var2)，当两个变量都为真是为真。<br>IF(var1 OR var2)，当两个变量其中一个为真时为真。<br><strong>IF(COMMAND cmd)，当给定的 cmd 确实是命令并可以调用是为真。</strong><br><strong>IF(EXISTS dir)或者 IF(EXISTS file)，当目录名或者文件名存在时为真。</strong><br>IF(file1  IS_NEWER_THAN file2)，当 file1 比 file2 新，或者 file1/file2 其中有一个不存在时为真，文件名请使用完整路径。<br><strong>IF(IS_DIRECTORY dirname)，当 dirname 是目录时，为真。</strong><br>IF(variable MATCHES regex)<br>IF(string MATCHES regex)<br>当给定的变量或者字符串能够匹配正则表达式 regex 时为真。比如：<br>IF(“hello” MATCHES “ell”)<br>MESSAGE(“true”)<br>ENDIF(“hello” MATCHES “ell”)IF(variable LESS number)</p><p>IF(string LESS number)<br>IF(variable GREATER number)<br>IF(string GREATER number)<br>IF(variable EQUAL number)<br>IF(string EQUAL number)<br>数字比较表达式</p><p>IF(variable STRLESS string)<br>IF(string STRLESS string)<br>IF(variable STRGREATER string)<br>IF(string STRGREATER string)<br>IF(variable STREQUAL string)<br>IF(string STREQUAL string)<br>按照字母序的排列进行比较.</p><p><strong>IF(DEFINED variable)，如果变量被定义，为真。</strong><br>一个小例子，用来判断平台差异：<br>IF(WIN32)<br>MESSAGE(STATUS “This is windows.”)<br>#做一些 Windows 相关的操作<br>ELSE(WIN32)<br>MESSAGE(STATUS “This is not windows”)<br>#做一些非 Windows 相关的操作<br>ENDIF(WIN32)<br>上述代码用来控制在不同的平台进行不同的控制，但是，阅读起来却并不是那么舒服，ELSE(WIN32)之类的语句很容易引起歧义。可以打开CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS 开关。<br>可以 SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)<br>这时候就可以写成:<br>IF(WIN32)<br>ELSE()<br>ENDIF()如果配合 ELSEIF 使用，可能的写法是这样:<br>IF(WIN32)<br>#do something related to WIN32<br>ELSEIF(UNIX)<br>#do something related to UNIX<br>ELSEIF(APPLE)<br>#do something related to APPLE<br>ENDIF(WIN32)</p></li><li><p>WHILE<br>WHILE 指令的语法是：</p><pre><code>WHILE(condition)  COMMAND1(ARGS ...)  COMMAND2(ARGS ...)  ...ENDWHILE(condition)</code></pre><p>其真假判断条件可以参考 IF 指令。</p></li><li><p>FOREACH<br>FOREACH 指令的使用方法有三种形式：<br>1，列表</p><pre><code>FOREACH(loop_var arg1 arg2 ...)  COMMAND1(ARGS ...)  COMMAND2(ARGS ...)  ...ENDFOREACH(loop_var)</code></pre><p>像前面使用的 AUX_SOURCE_DIRECTORY 的例子<br>AUX_SOURCE_DIRECTORY(. SRC_LIST)<br>FOREACH(F ${SRC_LIST})<br>MESSAGE(${F})<br>ENDFOREACH(F)<br>2，范围<br>FOREACH(loop_var RANGE total)<br>ENDFOREACH(loop_var)<br>从 0 到 total 以１为步进举例如下：<br>FOREACH(VAR RANGE 10)<br>MESSAGE(${VAR})<br>ENDFOREACH(VAR)<br>最终得到的输出是：<br>01<br>23<br>45<br>67<br>89<br>10<br>３，范围和步进<br>FOREACH(loop_var RANGE start stop [step])<br>ENDFOREACH(loop_var)<br>从 start 开始到 stop 结束，以 step 为步进，<br>举例如下<br>FOREACH(A RANGE 5 15 3)<br>MESSAGE(${A})<br>ENDFOREACH(A)<br>最终得到的结果是：<br>58<br>11<br>14<br>这个指令需要注意的是，直到遇到 ENDFOREACH 指令，整个语句块才会得到真正的执行。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《&lt;strong&gt;Cmake 实践&lt;/strong&gt;》笔记&lt;/p&gt;
    
    </summary>
    
      <category term="CMAKE" scheme="http://changsk.top/categories/CMAKE/"/>
    
    
      <category term="CMAKE" scheme="http://changsk.top/tags/CMAKE/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-721:Accounts Merge(账户合并)</title>
    <link href="http://changsk.top/2020/06/07/leetcode-721/"/>
    <id>http://changsk.top/2020/06/07/leetcode-721/</id>
    <published>2020-06-06T16:33:31.000Z</published>
    <updated>2020-06-06T16:42:48.722Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/accounts-merge/" target="_blank" rel="noopener">721. Accounts Merge</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Medium</p></blockquote><p>Given a list <code>accounts</code>, each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a <em>name</em>, and the rest of the elements are <em>emails</em> representing emails of the account.</p><p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p><p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <strong>in sorted order</strong>. The accounts themselves can be returned in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">accounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]</span><br><span class="line">Output: [[&quot;John&quot;, &apos;john00@mail.com&apos;, &apos;john_newyork@mail.com&apos;, &apos;johnsmith@mail.com&apos;],  [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]</span><br><span class="line">Explanation: </span><br><span class="line">The first and third John&apos;s are the same person as they have the common email &quot;johnsmith@mail.com&quot;.</span><br><span class="line">The second John and Mary are different people as none of their email addresses are used by other accounts.</span><br><span class="line">We could return these lists in any order, for example the answer [[&apos;Mary&apos;, &apos;mary@mail.com&apos;], [&apos;John&apos;, &apos;johnnybravo@mail.com&apos;], </span><br><span class="line">[&apos;John&apos;, &apos;john00@mail.com&apos;, &apos;john_newyork@mail.com&apos;, &apos;johnsmith@mail.com&apos;]] would still be accepted.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>The length of <code>accounts</code> will be in the range <code>[1, 1000]</code>.</p><p>The length of <code>accounts[i]</code> will be in the range <code>[1, 10]</code>.</p><p>The length of <code>accounts[i][j]</code> will be in the range <code>[1, 30]</code>.</p><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><p>并查集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; accountsMerge(List&lt;List&lt;String&gt;&gt; accounts) &#123;</span><br><span class="line">        DSU dsu = <span class="keyword">new</span> DSU();</span><br><span class="line">        Map&lt;String, String&gt; emailToName = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map&lt;String, Integer&gt; emailToID = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; account: accounts) &#123;</span><br><span class="line">            String name = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (String email: account) &#123;</span><br><span class="line">                <span class="keyword">if</span> (name == <span class="string">""</span>) &#123;</span><br><span class="line">                    name = email;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                emailToName.put(email, name);</span><br><span class="line">                <span class="keyword">if</span> (!emailToID.containsKey(email)) &#123;</span><br><span class="line">                    emailToID.put(email, id++);</span><br><span class="line">                &#125;</span><br><span class="line">                dsu.union(emailToID.get(account.get(<span class="number">1</span>)), emailToID.get(email));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; ans = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">for</span> (String email: emailToName.keySet()) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = dsu.find(emailToID.get(email));</span><br><span class="line">            ans.computeIfAbsent(index, x-&gt; <span class="keyword">new</span> ArrayList()).add(email);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; component: ans.values()) &#123;</span><br><span class="line">            Collections.sort(component);</span><br><span class="line">            component.add(<span class="number">0</span>, emailToName.get(component.get(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(ans.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10000</span>; ++i)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; accountsMerge(List&lt;List&lt;String&gt;&gt; accounts) &#123;</span><br><span class="line">        Map&lt;String, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; accounts.size(); j++)&#123;</span><br><span class="line">            List&lt;String&gt; list = accounts.get(j);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">                map.computeIfAbsent(list.get(i), k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;()).add(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[accounts.size()];</span><br><span class="line">        </span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s: map.keySet())&#123;</span><br><span class="line">            Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">            dfs(set, map, visited, map.get(s) , accounts);</span><br><span class="line">            <span class="keyword">if</span> (set.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                List&lt;String&gt; curList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">// add name</span></span><br><span class="line">                curList.add(accounts.get(map.get(s).get(<span class="number">0</span>)).get(<span class="number">0</span>));</span><br><span class="line">                curList.addAll(set);</span><br><span class="line">                res.add(curList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Set&lt;String&gt; res, Map&lt;String, List&lt;Integer&gt;&gt; map, <span class="keyword">boolean</span>[] visited, List&lt;Integer&gt; indexList, List&lt;List&lt;String&gt;&gt; accounts)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer i: indexList)&#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            List&lt;String&gt; subList = accounts.get(i).subList(<span class="number">1</span>, accounts.get(i).size());</span><br><span class="line">            res.addAll(subList);</span><br><span class="line">            <span class="comment">// visit the rest emails in the current account </span></span><br><span class="line">            <span class="keyword">for</span> (String s: subList)&#123;</span><br><span class="line">                dfs(res, map, visited, map.get(s), accounts);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：以上解法均来自于LeetCode</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/accounts-merge/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;721. Accounts Merge&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-438:Find All Anagrams in a String</title>
    <link href="http://changsk.top/2020/05/16/leetcode-438/"/>
    <id>http://changsk.top/2020/05/16/leetcode-438/</id>
    <published>2020-05-16T13:34:31.000Z</published>
    <updated>2020-05-16T13:37:46.734Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">Find All Anagrams in a String</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Medium</p></blockquote><p>Given a string <strong>s</strong> and a <strong>non-empty</strong> string <strong>p</strong>, find all the start indices of <strong>p</strong>‘s anagrams in <strong>s</strong>.</p><p>Strings consists of lowercase English letters only and the length of both strings <strong>s</strong> and <strong>p</strong> will not be larger than 20,100.</p><p>The order of output does not matter.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s: &quot;cbaebabacd&quot; p: &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[0, 6]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.</span><br><span class="line">The substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s: &quot;abab&quot; p: &quot;ab&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[0, 1, 2]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || p == <span class="keyword">null</span> || p.length() == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">    <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>]; <span class="comment">//character hash</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray()) &#123;</span><br><span class="line">        hash[c]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, count = p.length();</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[s.charAt(right++)]-- &gt;= <span class="number">1</span>) count--; </span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) list.add(left);</span><br><span class="line">        <span class="keyword">if</span> (right - left == p.length() &amp;&amp; hash[s.charAt(left++)]++ &gt;= <span class="number">0</span>) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/find-all-anagrams-in-a-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Find All Anagrams in a String&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-208:Implement Trie (Prefix Tree,前缀树或者字典树)</title>
    <link href="http://changsk.top/2020/04/22/leetcode-208/"/>
    <id>http://changsk.top/2020/04/22/leetcode-208/</id>
    <published>2020-04-22T08:45:45.000Z</published>
    <updated>2020-04-22T08:49:45.574Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">Prefix Tree</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Medium</p></blockquote><p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Trie trie = new Trie();</span><br><span class="line"></span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   // returns true</span><br><span class="line">trie.search(&quot;app&quot;);     // returns false</span><br><span class="line">trie.startsWith(&quot;app&quot;); // returns true</span><br><span class="line">trie.insert(&quot;app&quot;);   </span><br><span class="line">trie.search(&quot;app&quot;);     // returns true</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>You may assume that all inputs are consist of lowercase letters <code>a-z</code>.</li><li>All inputs are guaranteed to be non-empty strings.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>参考：<a href="https://leetcode.com/problems/implement-trie-prefix-tree/discuss/58832/AC-JAVA-solution-simple-using-single-array" target="_blank" rel="noopener">https://leetcode.com/problems/implement-trie-prefix-tree/discuss/58832/AC-JAVA-solution-simple-using-single-array</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isWord; </span><br><span class="line">    <span class="keyword">public</span> TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode ws = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ws.children[c - <span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                ws.children[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            ws = ws.children[c - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ws.isWord = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode ws = root; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ws.children[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            ws = ws.children[c - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ws.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode ws = root; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ws.children[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            ws = ws.children[c - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/implement-trie-prefix-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prefix Tree&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-207:Course Schedule(课程表)</title>
    <link href="http://changsk.top/2020/04/22/leetcode-207/"/>
    <id>http://changsk.top/2020/04/22/leetcode-207/</id>
    <published>2020-04-22T06:38:15.000Z</published>
    <updated>2020-04-22T06:48:01.648Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">Course Schedule</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Medium</p></blockquote><p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p><p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p><p>Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">             To take course 1 you should have finished course 0. So it is possible.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0],[0,1]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">             To take course 1 you should have finished course 0, and to take course 0 you should</span><br><span class="line">             also have finished course 1. So it is impossible.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The input prerequisites is a graph represented by <strong>a list of edges</strong>, not adjacency matrices. Read more about <a href="https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs" target="_blank" rel="noopener">how a graph is represented</a>.</li><li>You may assume that there are no duplicate edges in the input prerequisites.</li><li><code>1 &lt;= numCourses &lt;= 10^5</code></li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>代码来自<strong>LeetCode</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//状态表， 0 : 初始状态，没有被访问 1 : 正在被访问 2 : 访问完毕</span></span><br><span class="line">    <span class="keyword">int</span> state[];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numCourses == <span class="number">0</span> || prerequisites==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        state = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;Integer&gt; adj[] = <span class="keyword">new</span> LinkedList[numCourses];</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span>[] pair:prerequisites)&#123;</span><br><span class="line">           <span class="keyword">int</span> v = pair[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">if</span>(adj[v] == <span class="keyword">null</span>)&#123;</span><br><span class="line">               adj[v] = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">           &#125;</span><br><span class="line">           adj[v].add(pair[<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numCourses;i++)&#123;</span><br><span class="line">           <span class="comment">// i 没有被访问，则访问</span></span><br><span class="line">           <span class="keyword">if</span>(state[i]==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="comment">//在访问 i 的过程中出现了环，则表示失败</span></span><br><span class="line">               <span class="keyword">if</span>(!topologySort(i,adj))</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">topologySort</span><span class="params">(<span class="keyword">int</span> source, List&lt;Integer&gt; adj[])</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; neighbours = adj[source];</span><br><span class="line">        <span class="comment">//将状态变为正在被访问状态</span></span><br><span class="line">        state[source] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(neighbours!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i : neighbours)&#123;</span><br><span class="line">                <span class="comment">//没有访问则访问</span></span><br><span class="line">                <span class="keyword">if</span>(state[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!topologySort(i,adj))</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//出现了环，失败</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state[i]==<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将状态变为访问完毕状态</span></span><br><span class="line">        state[source]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/course-schedule/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Course Schedule&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-205:Isomorphic Strings</title>
    <link href="http://changsk.top/2020/04/21/leetcode-205/"/>
    <id>http://changsk.top/2020/04/21/leetcode-205/</id>
    <published>2020-04-21T10:27:54.000Z</published>
    <updated>2020-04-21T10:32:24.993Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="noopener">Isomorphic Strings</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Easy</p></blockquote><p>Given two strings <strong>s</strong> and <strong>t</strong>, determine if they are isomorphic.</p><p>Two strings are isomorphic if the characters in <strong>s</strong> can be replaced to get <strong>t</strong>.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;egg&quot;, t = &quot;add&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;foo&quot;, t = &quot;bar&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;paper&quot;, t = &quot;title&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>You may assume both <strong>s</strong> and <strong>t</strong> have the same length.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> m1[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>], m2[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>], n = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m1[s.charAt(i)] != m2[t.charAt(i)]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            m1[s.charAt(i)] = i + <span class="number">1</span>;</span><br><span class="line">            m2[t.charAt(i)] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/isomorphic-strings/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Isomorphic Strings&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-204:Count Primes(计算质数个数)</title>
    <link href="http://changsk.top/2020/04/21/leetcode-204/"/>
    <id>http://changsk.top/2020/04/21/leetcode-204/</id>
    <published>2020-04-21T07:32:26.000Z</published>
    <updated>2020-04-21T09:18:40.928Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/count-primes/" target="_blank" rel="noopener">Count Primes</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Easy</p></blockquote><p>Count the number of prime numbers less than a non-negative number, <strong>n</strong>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.</span><br></pre></td></tr></table></figure><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> arrays[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[i] == <span class="keyword">false</span>) count++;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span>(j * i &lt; n) arrays[i * j++] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><p><strong>Solution1</strong>的改进版本，有<strong>3</strong>倍的速度提升</p><p><strong>arrays[i] == false</strong>表示  *<em>i *</em> 是质数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> arrays[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// 2 是质数</span></span><br><span class="line">         <span class="comment">//除2之外的偶数一定不是质数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; n;i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[i] == <span class="keyword">false</span>) count++;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">while</span>(j * i &lt; n) </span><br><span class="line">            &#123;</span><br><span class="line">                arrays[i * j] = <span class="keyword">true</span>;</span><br><span class="line">                j += <span class="number">2</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h2><p>相较于<strong>Solution2</strong>，速度有所提升</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">boolean</span> arrays[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// 2 是质数</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arrays[i] == <span class="keyword">false</span>) count++;</span><br><span class="line">           <span class="keyword">long</span> j = i;</span><br><span class="line">           <span class="keyword">if</span> (j * i &gt; Integer.MAX_VALUE) <span class="keyword">continue</span>;</span><br><span class="line">           <span class="keyword">while</span> (j * i &lt; n) &#123;</span><br><span class="line">               arrays[i * (<span class="keyword">int</span>) j] = <span class="keyword">true</span>;</span><br><span class="line">               j += <span class="number">2</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h2><p>相较于<strong>Solution3</strong>，速度有所提升</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="comment">/*初始质数的个数为 n / 2，即去掉除2之外的所有的偶数，然后再加上数字1，然后从 3 开始把非质数去掉，剩下的就是质数的个数。如 n = 10，即n的值为[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，则 primes = 10 / 2 = 5，可能是质数的数为[2, 3, 5, 7, 9]。   </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> primes = n / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//把 i 的 k 倍的数字标记为非质数，其实 k 为 &gt;= j 的奇数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// i 不是质数，则 i 的整数倍的数字已经被标记为非质数了</span></span><br><span class="line">            <span class="keyword">if</span> (isPrime[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; n; j += <span class="number">2</span> * i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isPrime[j]) &#123;</span><br><span class="line">                    primes--;</span><br><span class="line">                    isPrime[j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> primes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/count-primes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Count Primes&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-203:Remove Linked List Elements</title>
    <link href="http://changsk.top/2020/04/21/leetcode-203/"/>
    <id>http://changsk.top/2020/04/21/leetcode-203/</id>
    <published>2020-04-21T07:08:31.000Z</published>
    <updated>2020-04-21T07:12:49.487Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener">Remove Linked List Elements</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Easy</p></blockquote><p>Remove all elements from a linked list of integers that have value <strong>val</strong>.</p><p><strong>Example:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">6</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span>, val = <span class="number">6</span></span><br><span class="line">Output: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//删除链表开头值为val的连续结点</span></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; head.val == val) head = head.next;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode curNode = head;</span><br><span class="line">        ListNode nextNode = head.next;</span><br><span class="line">        <span class="keyword">while</span>(nextNode != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//nextNode 始终指向值不为 val 的结点</span></span><br><span class="line">            <span class="keyword">while</span>(nextNode != <span class="keyword">null</span> &amp;&amp; nextNode.val == val) nextNode = nextNode.next;</span><br><span class="line">            <span class="comment">//末尾节点值为 val 的情况</span></span><br><span class="line">            <span class="keyword">if</span>(nextNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">                curNode.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            curNode.next = nextNode;</span><br><span class="line">            curNode = curNode.next;</span><br><span class="line">            nextNode = nextNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/remove-linked-list-elements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Remove Linked List Elements&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-190:Reverse Bits</title>
    <link href="http://changsk.top/2020/04/21/leetcode-190/"/>
    <id>http://changsk.top/2020/04/21/leetcode-190/</id>
    <published>2020-04-21T06:18:03.000Z</published>
    <updated>2020-04-21T06:30:25.992Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/reverse-bits/" target="_blank" rel="noopener">Reverse Bits</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Easy</p></blockquote><p>Reverse bits of a given 32 bits unsigned integer.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 00000010100101000001111010011100</span><br><span class="line">Output: 00111001011110000010100101000000</span><br><span class="line">Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 11111111111111111111111111111101</span><br><span class="line">Output: 10111111111111111111111111111111</span><br><span class="line">Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li><li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two's_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 2</strong> above the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>参考：<a href="https://leetcode.com/problems/reverse-bits/discuss/54760/My-3ms-pure-C-solution" target="_blank" rel="noopener">My 3ms pure C solution</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n) &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++, n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        m &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        m |= n &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/reverse-bits/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reverse Bits&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-174:Dungeon Game</title>
    <link href="http://changsk.top/2020/04/20/leetcode-174/"/>
    <id>http://changsk.top/2020/04/20/leetcode-174/</id>
    <published>2020-04-20T14:21:25.000Z</published>
    <updated>2020-04-21T05:00:04.429Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/dungeon-game/" target="_blank" rel="noopener">Dungeon Game</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Hard</p></blockquote><p>The demons had captured the princess (<strong>P</strong>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<strong>K</strong>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.</p><p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.</p><p>Some of the rooms are guarded by demons, so the knight loses health (<em>negative</em> integers) upon entering these rooms; other rooms are either empty (<em>0’s</em>) or contain magic orbs that increase the knight’s health (<em>positive</em> integers).</p><p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p><p><strong>Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.</strong></p><p>For example, given the dungeon below, the initial health of the knight must be at least <strong>7</strong> if he follows the optimal path <code>RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN</code>.</p><table><thead><tr><th align="center">-2 (K)</th><th align="center">-3</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">-5</td><td align="center">-10</td><td align="center">1</td></tr><tr><td align="center">10</td><td align="center">30</td><td align="center">-5 (P)</td></tr></tbody></table><p><strong>Note:</strong></p><ul><li>The knight’s health has no upper bound.</li><li>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</li></ul><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><p>dfs，深搜，从左上角到右下角走，自顶向下，超时了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="keyword">int</span>[][] dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dungeon == <span class="keyword">null</span> || dungeon.length == <span class="number">0</span>) <span class="keyword">return</span> min;</span><br><span class="line">        calculateMinimumHPCore(dungeon, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, dungeon[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateMinimumHPCore</span><span class="params">(<span class="keyword">int</span>[][] dungeon, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> cur, <span class="keyword">int</span> curMin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; dungeon.length - <span class="number">1</span> || j &gt; dungeon[<span class="number">0</span>].length - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        curMin = Math.min(curMin, cur + dungeon[i][j]);</span><br><span class="line">        <span class="keyword">if</span>(i == dungeon.length - <span class="number">1</span> &amp;&amp; j == dungeon[<span class="number">0</span>].length - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur += dungeon[i][j];</span><br><span class="line">            min = Math.min(min, Math.max( (curMin &lt;= <span class="number">0</span> ? (<span class="number">0</span> - curMin + <span class="number">1</span>) : <span class="number">1</span>), (cur &lt;= <span class="number">0</span> ? <span class="number">0</span> - cur + <span class="number">1</span> : <span class="number">1</span>)));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        calculateMinimumHPCore(dungeon, i + <span class="number">1</span>, j, cur + dungeon[i][j], curMin);</span><br><span class="line">        calculateMinimumHPCore(dungeon, i, j + <span class="number">1</span>, cur + dungeon[i][j], curMin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><p><strong>mem[i][j]</strong>表示，把<strong>[i, j]</strong>所在的位置当作<strong>K</strong>，此时所需的最小初始健康值。</p><p>这种解法是自底向上，从<strong>P</strong>出发到<strong>K</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="keyword">int</span>[][] dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dungeon.length == <span class="number">0</span> || dungeon[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(dungeon, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[dungeon.length][dungeon[<span class="number">0</span>].length]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从[i, j]出发所需的最小初始健康值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] d, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] mem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= d.length || j &gt;= d[<span class="number">0</span>].length) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mem[i][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mem[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> min = Math.min(helper(d, i + <span class="number">1</span>, j, mem), helper(d, i, j + <span class="number">1</span>, mem));</span><br><span class="line">        <span class="keyword">if</span> (min == Integer.MAX_VALUE) &#123;</span><br><span class="line">            min = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mem[i][j] = Math.max(min - d[i][j], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> mem[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/dungeon-game/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dungeon Game&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-191:Number of 1 Bits(二进制中1的个数)</title>
    <link href="http://changsk.top/2020/04/20/leetcode-191/"/>
    <id>http://changsk.top/2020/04/20/leetcode-191/</id>
    <published>2020-04-20T10:21:49.000Z</published>
    <updated>2020-04-20T10:45:33.324Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">Number of 1 Bits</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Easy</p></blockquote><p>Write a function that takes an unsigned integer and return the number of ‘1’ bits it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">Hamming weight</a>).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 00000000000000000000000000001011</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The input binary string 00000000000000000000000000001011 has a total of three &apos;1&apos; bits.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 00000000000000000000000010000000</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The input binary string 00000000000000000000000010000000 has a total of one &apos;1&apos; bit.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 11111111111111111111111111111101</span><br><span class="line">Output: 31</span><br><span class="line">Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one &apos;1&apos; bits.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li><li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two's_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 3</strong> above the input represents the signed integer <code>-3</code>.</li></ul><h2 id="AC代码1"><a href="#AC代码1" class="headerlink" title="AC代码1"></a>AC代码1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.bitCount(n); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码2"><a href="#AC代码2" class="headerlink" title="AC代码2"></a>AC代码2</h2><p>参考：<a href="https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8</a></p><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。<br>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!= <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码3"><a href="#AC代码3" class="headerlink" title="AC代码3"></a>AC代码3</h2><p>n 每次都是无符号右移一位，可避免当n为负数时，最高位总是1，从而引发死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((n &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        n = n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码4"><a href="#AC代码4" class="headerlink" title="AC代码4"></a>AC代码4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numOfOne = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            numOfOne++;</span><br><span class="line">            <span class="comment">//n &amp; -n 表示的是 n 从右到左第一个1所在的位置</span></span><br><span class="line">            <span class="comment">//如n = 6,那么 n &amp; -n 就是 2</span></span><br><span class="line">            n = n &amp; (~(n &amp; -n));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numOfOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/number-of-1-bits/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Number of 1 Bits&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-189:Rotate Array</title>
    <link href="http://changsk.top/2020/04/20/leetcode-189/"/>
    <id>http://changsk.top/2020/04/20/leetcode-189/</id>
    <published>2020-04-20T04:58:35.000Z</published>
    <updated>2020-04-20T05:00:00.826Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">Rotate Array</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Easy</p></blockquote><p>Given an array, rotate the array to the right by <em>k</em> steps, where <em>k</em> is non-negative.</p><p><strong>Example 1:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] <span class="keyword">and</span> k = <span class="number">3</span></span><br><span class="line">Output: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">Explanation:</span><br><span class="line">rotate <span class="number">1</span> steps to the right: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">rotate <span class="number">2</span> steps to the right: [<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">rotate <span class="number">3</span> steps to the right: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">-1</span>,<span class="number">-100</span>,<span class="number">3</span>,<span class="number">99</span>] <span class="keyword">and</span> k = <span class="number">2</span></span><br><span class="line">Output: [<span class="number">3</span>,<span class="number">99</span>,<span class="number">-1</span>,<span class="number">-100</span>]</span><br><span class="line">Explanation: </span><br><span class="line">rotate <span class="number">1</span> steps to the right: [<span class="number">99</span>,<span class="number">-1</span>,<span class="number">-100</span>,<span class="number">3</span>]</span><br><span class="line">rotate <span class="number">2</span> steps to the right: [<span class="number">3</span>,<span class="number">99</span>,<span class="number">-1</span>,<span class="number">-100</span>]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li><li>Could you do it in-place with O(1) extra space?</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        k %= nums.length;</span><br><span class="line">        rorate(nums, <span class="number">0</span>, nums.length - k - <span class="number">1</span>);</span><br><span class="line">        rorate(nums, nums.length - k, nums.length - <span class="number">1</span>);</span><br><span class="line">        rorate(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rorate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/rotate-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rotate Array&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-187:Repeated DNA Sequences</title>
    <link href="http://changsk.top/2020/04/20/leetcode-187/"/>
    <id>http://changsk.top/2020/04/20/leetcode-187/</id>
    <published>2020-04-20T04:41:51.000Z</published>
    <updated>2020-04-20T10:37:28.599Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/repeated-dna-sequences/" target="_blank" rel="noopener">Repeated DNA Sequences</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>题目难度：Medium</p></blockquote><p>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: “ACGAATTCCG”. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p><p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;</span><br><span class="line"></span><br><span class="line">Output: [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]</span><br></pre></td></tr></table></figure><h2 id="AC代码1"><a href="#AC代码1" class="headerlink" title="AC代码1"></a>AC代码1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; words = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; doublewords = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] maps = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">//maps['A' - 'A'] = 0;</span></span><br><span class="line">        maps[<span class="string">'C'</span> - <span class="string">'A'</span>] = <span class="number">1</span>;</span><br><span class="line">        maps[<span class="string">'G'</span> - <span class="string">'A'</span>] = <span class="number">2</span>;</span><br><span class="line">        maps[<span class="string">'T'</span> - <span class="string">'A'</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i + <span class="number">9</span> &lt; s.length();i++)&#123; <span class="comment">// 注意是 i + 9</span></span><br><span class="line">            <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j++)&#123;</span><br><span class="line">                val &lt;&lt;= <span class="number">2</span>;</span><br><span class="line">                val |= maps[s.charAt(j + i) - <span class="string">'A'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!words.add(val) &amp;&amp; doublewords.add(val))</span><br><span class="line">                resList.add(s.substring(i,i + <span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC代码2"><a href="#AC代码2" class="headerlink" title="AC代码2"></a>AC代码2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.length() &lt;= <span class="number">10</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//注意到字符只有ACGT, 因此考虑映射成二进制数00,01,10,11, 也就是0,1,2,3</span></span><br><span class="line"><span class="comment">//尽量避免使用hash, 因此字符'X'--&gt;X-'A'</span></span><br><span class="line"><span class="comment">//'T'-'A' = n-1</span></span><br><span class="line"><span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="string">'T'</span> - <span class="string">'A'</span> + <span class="number">1</span>];</span><br><span class="line">map[<span class="string">'A'</span> - <span class="string">'A'</span>] = <span class="number">0</span>;</span><br><span class="line">map[<span class="string">'C'</span> - <span class="string">'A'</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="string">'G'</span> - <span class="string">'A'</span>] = <span class="number">2</span>;</span><br><span class="line">map[<span class="string">'T'</span> - <span class="string">'A'</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">byte</span>[] counts = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1048577</span>];<span class="comment">//20位数最大为1048575, 作为序号</span></span><br><span class="line">List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//构建长度为10的数字</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">x = x &lt;&lt; <span class="number">2</span>;</span><br><span class="line">x = x | map[s.charAt(i) - <span class="string">'A'</span>];</span><br><span class="line">&#125;</span><br><span class="line">counts[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span> ; i &lt; s.length() ; i++)&#123;</span><br><span class="line"><span class="comment">//将最前面的2位, 置为0</span></span><br><span class="line">x = x &amp; (~ (<span class="number">3</span> &lt;&lt; <span class="number">18</span>));</span><br><span class="line">x = x &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="comment">//尾部添加新字符</span></span><br><span class="line">x = x | map[s.charAt(i) - <span class="string">'A'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(counts[x] == <span class="number">1</span>)&#123;</span><br><span class="line">ans.add(s.substring(i - <span class="number">9</span> , i + <span class="number">1</span>));</span><br><span class="line">counts[x] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">if</span>(counts[x] == <span class="number">0</span>)&#123;</span><br><span class="line">counts[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/repeated-dna-sequences/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Repeated DNA Sequences&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://changsk.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://changsk.top/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://changsk.top/tags/Leetcode/"/>
    
  </entry>
  
</feed>
