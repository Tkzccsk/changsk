<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>changsk&#39;s blogs</title>
  
  <subtitle>chang.sk@foxmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-23T08:38:15.875Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>changsk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-40:Combination Sum II</title>
    <link href="http://yoursite.com/2019/08/23/leetcode-40/"/>
    <id>http://yoursite.com/2019/08/23/leetcode-40/</id>
    <published>2019-08-23T08:35:53.000Z</published>
    <updated>2019-08-23T08:38:15.875Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum-ii/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Medium</strong></p><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, target, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> remain, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(remain &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(remain == <span class="number">0</span>) list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; start &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            backtrack(list, tempList, nums, remain - nums[i], i + <span class="number">1</span>);</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/combination-sum-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/combination-sum-ii/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-39:Combination Sum</title>
    <link href="http://yoursite.com/2019/08/23/leetcode-39/"/>
    <id>http://yoursite.com/2019/08/23/leetcode-39/</id>
    <published>2019-08-23T08:32:53.000Z</published>
    <updated>2019-08-23T08:35:41.135Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Medium</strong></p><p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,6,7], target = 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates = [2,3,5], target = 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, target, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> remain, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(remain &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(remain == <span class="number">0</span>) list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            backtrack(list, tempList, nums, remain - nums[i], i); </span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/combination-sum/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-90:Subsets II</title>
    <link href="http://yoursite.com/2019/08/23/leetcode-90/"/>
    <id>http://yoursite.com/2019/08/23/leetcode-90/</id>
    <published>2019-08-23T08:26:34.000Z</published>
    <updated>2019-08-23T08:28:29.844Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/subsets-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/subsets-ii/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Medium</strong></p><p>Given a collection of integers that might contain duplicates, <strong>nums</strong>, return all possible subsets (the power set).</p><p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != start &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        tempList.add(nums[i]);</span><br><span class="line">        backtrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">        tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/subsets-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/subsets-ii/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-78:Subsets</title>
    <link href="http://yoursite.com/2019/08/23/leetcode-78/"/>
    <id>http://yoursite.com/2019/08/23/leetcode-78/</id>
    <published>2019-08-23T08:19:04.000Z</published>
    <updated>2019-08-23T08:24:10.362Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener">https://leetcode.com/problems/subsets/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Medium</strong></p><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p><p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> &amp;&amp; nums.length == <span class="number">0</span>) <span class="keyword">return</span> resList;</span><br><span class="line">        resList.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = resList.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; size;j++)&#123;</span><br><span class="line">                ArrayList list = <span class="keyword">new</span> ArrayList(resList.get(j));</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">                resList.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//Arrays.sort(nums);</span></span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        tempList.add(nums[i]);</span><br><span class="line">        backtrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">        tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/subsets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/subsets/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>美团点评-2020校招(2019.8.22)</title>
    <link href="http://yoursite.com/2019/08/23/meituan-exam1/"/>
    <id>http://yoursite.com/2019/08/23/meituan-exam1/</id>
    <published>2019-08-23T01:52:08.000Z</published>
    <updated>2019-08-23T09:33:11.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最小唯一前缀"><a href="#最小唯一前缀" class="headerlink" title="最小唯一前缀"></a>最小唯一前缀</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入n串唯一的字符串，n为2到100之间，字符串用”,”隔开，字符串长度不超过100.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>可以唯一区分字符串的最小前缀，用”,”隔开</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meituanapp,meituanwaimai,dianpingliren,dianpingjiehun</span><br></pre></td></tr></table></figure><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meituana,meituanw,dianpingl,dianpingj</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csk.meituan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            String[] strs = str.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">int</span> len = strs.length;</span><br><span class="line">            <span class="keyword">int</span>[] lens = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len - <span class="number">1</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; len;j++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> q = lens[i];</span><br><span class="line">                    <span class="keyword">int</span> p = lens[j];</span><br><span class="line">                    <span class="keyword">while</span>(strs[i].charAt(q) == strs[j].charAt(p))&#123;</span><br><span class="line">                        q++;</span><br><span class="line">                        p++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    lens[i] = q;</span><br><span class="line">                    lens[j] = p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == len - <span class="number">1</span>) System.out.print(strs[i].substring(<span class="number">0</span>, lens[i] + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">else</span> System.out.print(strs[i].substring(<span class="number">0</span>, lens[i] + <span class="number">1</span>) + <span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="美团骑手包裹区间分组"><a href="#美团骑手包裹区间分组" class="headerlink" title="美团骑手包裹区间分组"></a>美团骑手包裹区间分组</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>2110年美团外卖火星第3000号配送站点有26名骑手，分别以大写字母A-Z命名，因此可以称呼这些骑手为皇家骑手特工A，皇家骑手特工B，，，皇家骑手特工Z，某美团黑珍珠餐厅的外卖流水线上会顺序产出一组包裹，美团配送调度引擎已经将包裹配送到骑手，并在包裹上粘贴好骑手名称，如<code>RETTEBTAE</code>代表代表一组流水线包裹共9个，同时分配给了名字A B E R T的5名骑手。请在不打乱流水线产出顺序的情况下，把这组包裹划分为<strong>尽可能多</strong>的片段，同一个骑手只会出现在其中一个片段，返回一个表示每个包裹片段的长度的列表。</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>输入数据只有一行，为一个字符串（不包含引号），长度不超过1000，只包含大写字母（`A`<code>-\</code>Z`）,字符之间无空格。</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>输出每个分割成片段的包裹组的长度，每个长度之间通过空格隔开。</p><h2 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MPMPCPMCMDEFEGDEHINHKLIN</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 7 8</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csk.meituan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by changsk on 2019/8/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MPMPCPMCMDEFEGDEHINHKLIN</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;i &lt; str.length();i++) map.put(str.charAt(i), i);</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> temp_start = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; str.length())&#123;</span><br><span class="line">                end = map.get(str.charAt(i));</span><br><span class="line">                temp_start = start;</span><br><span class="line">                <span class="keyword">boolean</span> res = helper(str, map, start, end);</span><br><span class="line">                <span class="keyword">while</span>(!res)&#123;</span><br><span class="line">                    res = helper(str, map, start, end);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(end - temp_start + <span class="number">1</span>);</span><br><span class="line">                i = end + <span class="number">1</span>;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j : list)</span><br><span class="line">                System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(String str, HashMap&lt;Character, Integer&gt; map, <span class="keyword">int</span> start, <span class="keyword">int</span> _end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> max = map.get(str.charAt(_end));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>;i &lt; _end;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(str.charAt(i)) &gt; max)&#123;</span><br><span class="line">                res = <span class="keyword">false</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                end = map.get(str.charAt(i));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最小唯一前缀&quot;&gt;&lt;a href=&quot;#最小唯一前缀&quot; class=&quot;headerlink&quot; title=&quot;最小唯一前缀&quot;&gt;&lt;/a&gt;最小唯一前缀&lt;/h2&gt;&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;p&gt;输入n串唯一的字符串，n为2到100之间，字符串用”,”隔开，字符串长度不超过100.&lt;/p&gt;
&lt;h3 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; class=&quot;headerlink&quot; title=&quot;输出&quot;&gt;&lt;/a&gt;输出&lt;/h3&gt;&lt;p&gt;可以唯一区分字符串的最小前缀，用”,”隔开&lt;/p&gt;
&lt;h3 id=&quot;样例输入&quot;&gt;&lt;a href=&quot;#样例输入&quot; class=&quot;headerlink&quot; title=&quot;样例输入&quot;&gt;&lt;/a&gt;样例输入&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;meituanapp,meituanwaimai,dianpingliren,dianpingjiehun&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;样例输入-1&quot;&gt;&lt;a href=&quot;#样例输入-1&quot; class=&quot;headerlink&quot; title=&quot;样例输入&quot;&gt;&lt;/a&gt;样例输入&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;meituana,meituanw,dianpingl,dianpingj&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="美团笔试" scheme="http://yoursite.com/tags/%E7%BE%8E%E5%9B%A2%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch原理</title>
    <link href="http://yoursite.com/2019/08/22/es-principle/"/>
    <id>http://yoursite.com/2019/08/22/es-principle/</id>
    <published>2019-08-22T12:24:53.000Z</published>
    <updated>2019-08-22T12:55:22.155Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://developer.51cto.com/art/201904/594615.htm" target="_blank" rel="noopener">终于有人把Elasticsearch原理讲透了！</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://developer.51cto.com/art/201904/594615.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;终于有人把Elasticsearch原理讲透了！&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="搜索" scheme="http://yoursite.com/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-47:Permutations II(去重的全排列)</title>
    <link href="http://yoursite.com/2019/08/19/leetcode-47/"/>
    <id>http://yoursite.com/2019/08/19/leetcode-47/</id>
    <published>2019-08-19T08:14:17.000Z</published>
    <updated>2019-08-19T08:17:21.862Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/permutations-ii/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Medium</strong></p><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> resList;</span><br><span class="line">        Arrays.sort(nums); <span class="comment">//这一步是必须的</span></span><br><span class="line">        permuteUniqueCore(nums, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), resList);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">permuteUniqueCore</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;Integer&gt; tmpList, List&lt;List&lt;Integer&gt;&gt; resList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmpList.size() == nums.length) &#123;</span><br><span class="line">            resList.add(<span class="keyword">new</span> ArrayList(tmpList));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmpList.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            tmpList.add(nums[i]);</span><br><span class="line">            permuteUniqueCore(nums, tmpList, resList);</span><br><span class="line">            tmpList.remove(tmpList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/permutations-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/permutations-ii/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-46:Permutations(全排列)</title>
    <link href="http://yoursite.com/2019/08/19/leetcode-46/"/>
    <id>http://yoursite.com/2019/08/19/leetcode-46/</id>
    <published>2019-08-19T08:01:01.000Z</published>
    <updated>2019-08-19T08:59:47.754Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">https://leetcode.com/problems/permutations/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Medium</strong></p><p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><blockquote><p>以下解释和代码来自于 <strong>LeetCode</strong></p></blockquote><p><img src="1.jpg" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] num) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (num.length == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    List&lt;Integer&gt; l0 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    l0.add(num[<span class="number">0</span>]);  <span class="comment">//首先加入第一个数字</span></span><br><span class="line">    ans.add(l0);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; num.length; ++i)&#123; <span class="comment">//依次加入后续每个数字</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; new_ans = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(); <span class="comment">//创建新list  存储加入新数字后的结果 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;=i; ++j)&#123;  <span class="comment">//加入的新数字可能存储的位置            </span></span><br><span class="line">           <span class="keyword">for</span> (List&lt;Integer&gt; l : ans)&#123;</span><br><span class="line">           List&lt;Integer&gt; new_l = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(l);</span><br><span class="line">           new_l.add(j,num[i]);</span><br><span class="line">           new_ans.add(new_l);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = new_ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><p><strong>DFS</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">   List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="comment">// Arrays.sort(nums); // not necessary</span></span><br><span class="line">   backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums);</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(tempList.size() == nums.length)&#123;</span><br><span class="line">      list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));   <span class="comment">//注意这里的操作，是加入一个新的list，内容和 tempList 一样</span></span><br><span class="line">   &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123; </span><br><span class="line">         <span class="keyword">if</span>(tempList.contains(nums[i])) <span class="keyword">continue</span>; <span class="comment">// element already exists, skip</span></span><br><span class="line">         tempList.add(nums[i]);</span><br><span class="line">         backtrack(list, tempList, nums);</span><br><span class="line">         tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己写的代码 ，和上面的原理差不多，只不过判断重复用的是一个 boolean 数组，backtrack里面参数  len 也是没有必要的，显得很啰嗦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> resList;</span><br><span class="line">        <span class="keyword">boolean</span>[] seen = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        backtrack(resList, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), nums, seen, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; resList, ArrayList&lt;Integer&gt; tmpList, <span class="keyword">int</span>[] nums, <span class="keyword">boolean</span>[] seen, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len == nums.length) &#123;</span><br><span class="line">            resList.add(<span class="keyword">new</span> ArrayList(tmpList));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(seen[i] == <span class="keyword">true</span>) <span class="keyword">continue</span>;</span><br><span class="line">            tmpList.add(nums[i]);</span><br><span class="line">            seen[i] = <span class="keyword">true</span>;</span><br><span class="line">            backtrack(resList, tmpList, nums, seen, len + <span class="number">1</span>);</span><br><span class="line">            tmpList.remove(tmpList.size() - <span class="number">1</span>);</span><br><span class="line">            seen[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/permutations/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/permutations/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>判断IP地址有效性的正则表达式</title>
    <link href="http://yoursite.com/2019/08/19/ip-regex/"/>
    <id>http://yoursite.com/2019/08/19/ip-regex/</id>
    <published>2019-08-19T07:40:49.000Z</published>
    <updated>2019-08-19T07:59:51.013Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">matches</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        String res = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (text != <span class="keyword">null</span> &amp;&amp; !text.isEmpty()) &#123;</span><br><span class="line">            String regex = <span class="string">"^(1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\."</span></span><br><span class="line">                    + <span class="string">"(1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."</span></span><br><span class="line">                    + <span class="string">"(1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\."</span></span><br><span class="line">                    + <span class="string">"(1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$"</span>;</span><br><span class="line">            <span class="keyword">if</span> (text.matches(regex)) &#123;</span><br><span class="line">                res = text + <span class="string">"\n是一个合法的IP地址！"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = text + <span class="string">"\n不是一个合法的IP地址！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == <span class="keyword">null</span> ? <span class="string">"输入ip无效"</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String ip = <span class="string">"127.0.0.255"</span>;</span><br><span class="line">        System.out.println(matches(ip));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>^:行的开头</p><p>$:行的结尾</p><p>\d:表示0到9的任意数字</p><p>X{2}:X出现两次</p><p>[0-4]:出现0,1,2,3,4都算匹配上</p><blockquote><p>参考:</p><p><a href="https://blog.csdn.net/zcy88759/article/details/7870763" target="_blank" rel="noopener">JAVA验证IP地址的有效性</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="正则表达式" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-198:House Robber(打家劫舍)</title>
    <link href="http://yoursite.com/2019/08/18/leetcode-198/"/>
    <id>http://yoursite.com/2019/08/18/leetcode-198/</id>
    <published>2019-08-18T09:19:45.000Z</published>
    <updated>2019-08-18T09:25:12.939Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">https://leetcode.com/problems/house-robber/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Easy</strong></p><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">             Total amount you can rob = 1 + 3 = 4.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).</span><br><span class="line">             Total amount you can rob = 2 + 9 + 1 = 12.</span><br></pre></td></tr></table></figure><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; nums.length;i++)</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= <span class="number">3</span>)</span><br><span class="line">                nums[i] += Math.max(nums[i - <span class="number">2</span>], nums[i - <span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">else</span> nums[i] += nums[i - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[nums.length - <span class="number">1</span>], nums[nums.length - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/house-robber/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/house-robber/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1038:Binary Search Tree to Greater Sum Tree</title>
    <link href="http://yoursite.com/2019/08/18/leetcode-1038/"/>
    <id>http://yoursite.com/2019/08/18/leetcode-1038/</id>
    <published>2019-08-18T03:24:58.000Z</published>
    <updated>2019-08-18T09:27:20.631Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given the root of a binary <strong>search</strong> tree with distinct values, modify it so that every <code>node</code> has a new value equal to the sum of the values of the original tree that are greater than or equal to <code>node.val</code>.</p><p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p><ul><li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node’s key.</li><li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node’s key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p><strong>Example 1:</strong></p><p><img src="1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]</span><br><span class="line">Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>The number of nodes in the tree is between <code>1</code> and <code>100</code>.</li><li>Each node will have value between <code>0</code> and <code>100</code>.</li><li>The given tree is a binary search tree.</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstToGst</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">            helper(root.right);</span><br><span class="line">        cur += root.val;</span><br><span class="line">        root.val = cur;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</span><br><span class="line">            helper(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>问题 1004-[递归]母牛的故事</title>
    <link href="http://yoursite.com/2019/08/15/stories-of-cows/"/>
    <id>http://yoursite.com/2019/08/15/stories-of-cows/</id>
    <published>2019-08-15T13:48:32.000Z</published>
    <updated>2019-08-15T13:53:56.528Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://www.dotcpp.com/oj/problem1004.html?sid=1076912&amp;lang=1#editor" target="_blank" rel="noopener">https://www.dotcpp.com/oj/problem1004.html?sid=1076912&amp;lang=1#editor</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。<br>n=0表示输入数据的结束，不做处理。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对于每个测试实例，输出在第n年的时候母牛的数量。<br>每个输出占一行。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> fn;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">2</span>,f3=<span class="number">3</span>,f4=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;f1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;f2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) <span class="built_in">cout</span>&lt;&lt;f3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">4</span>) <span class="built_in">cout</span>&lt;&lt;f4&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">fn=f2+f4;</span><br><span class="line">f2=f3;</span><br><span class="line">f3=f4;</span><br><span class="line">f4=fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fn&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://www.dotcpp.com/oj/problem1004.html?sid=1076912&amp;amp;lang=1#editor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.dotcpp.com/oj/problem1004.html?sid=1076912&amp;amp;lang=1#editor&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-674:Longest Continuous Increasing Subsequence(最长连续递增子串)</title>
    <link href="http://yoursite.com/2019/08/15/leetcode-674/"/>
    <id>http://yoursite.com/2019/08/15/leetcode-674/</id>
    <published>2019-08-15T02:23:27.000Z</published>
    <updated>2019-08-15T02:27:55.664Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/longest-continuous-increasing-subsequence/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-continuous-increasing-subsequence/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>题目难度：Easy</strong></p><p>Given an unsorted array of integers, find the length of longest <code>continuous</code> increasing subsequence (subarray).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,4,7]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. </span><br><span class="line">Even though [1,3,5,7] is also an increasing subsequence, it&apos;s not a continuous one where 5 and 7 are separated by 4.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,2,2,2]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The longest continuous increasing subsequence is [2], its length is 1.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> Length of the array will not exceed 10,000.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLengthOfLCIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i - <span class="number">1</span>]) max++;</span><br><span class="line">            <span class="keyword">else</span> max = <span class="number">1</span>;</span><br><span class="line">            res = Math.max(max, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/longest-continuous-increasing-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/longest-continuous-increasing-subsequence/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>最长严格上升子序列</title>
    <link href="http://yoursite.com/2019/08/11/Longest-strictly-rising-subsequence/"/>
    <id>http://yoursite.com/2019/08/11/Longest-strictly-rising-subsequence/</id>
    <published>2019-08-10T16:48:13.000Z</published>
    <updated>2019-08-10T17:11:11.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给一个数组a1, a2 … an，找到最长的严格上升子序列。</p><p>输出长度即可。</p><a id="more"></a><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>第一行，一个整数N。</p><p>第二行 ，N个整数（N &lt; = 5000）</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>输出最长不上升子序列的长度</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>输入：9 3 6 6 2 7</p><p>输出：3</p><p>解析：最长的严格上升子序列为 [3, 6, 7]</p><ul><li>注意：[3, 6, 6, 7]不算严格上升子序列</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csk.beike;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">                arr[i] = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j] &lt; arr[i])&#123;</span><br><span class="line">                        dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                        max = Math.max(max, dp[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(max + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给一个数组a1, a2 … an，找到最长的严格上升子序列。&lt;/p&gt;
&lt;p&gt;输出长度即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer-和为S的连续正数序列</title>
    <link href="http://yoursite.com/2019/08/05/jianzhioffer-continuous-positive-sequence/"/>
    <id>http://yoursite.com/2019/08/05/jianzhioffer-continuous-positive-sequence/</id>
    <published>2019-08-05T05:26:41.000Z</published>
    <updated>2019-08-05T13:19:27.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? <strong>Good Luck!</strong></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt; &gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> curSum = start + end;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt; <span class="number">3</span>) <span class="keyword">return</span> resList;</span><br><span class="line">        <span class="keyword">int</span> max = (sum + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end &amp;&amp; end &lt;= max)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curSum == sum) &#123;</span><br><span class="line">                addList(start, end, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(end - start + <span class="number">1</span>));</span><br><span class="line">                curSum -= start;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(curSum &lt; sum) &#123;</span><br><span class="line">                end++;</span><br><span class="line">                curSum += end;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                curSum -= start;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addList</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i &lt;= end;i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        resList.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? &lt;strong&gt;Good Luck!&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-76:Minimum Window Substring</title>
    <link href="http://yoursite.com/2019/08/05/leetcode-76/"/>
    <id>http://yoursite.com/2019/08/05/leetcode-76/</id>
    <published>2019-08-05T05:12:28.000Z</published>
    <updated>2019-08-05T05:14:40.694Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.com/problems/minimum-window-substring/" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-window-substring/</a></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: S = &quot;ADOBECODEBANC&quot;, T = &quot;ABC&quot;</span><br><span class="line">Output: &quot;BANC&quot;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>If there is no such window in S that covers all characters in T, return the empty string <code>&quot;&quot;</code>.</li><li>If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>代码来自<code>Leetcode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sLen = s.length(), tLen = t.length(), count = t.length(), start = <span class="number">0</span>, minLen = Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] freq = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] tc = t.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: tc) &#123;</span><br><span class="line">            freq[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;sLen) &#123;</span><br><span class="line">            <span class="keyword">if</span>(freq[sc[r++]]-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(minLen &gt; r-l) &#123;</span><br><span class="line">                    minLen = r-l;</span><br><span class="line">                    start = l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(freq[sc[l++]]++ == <span class="number">0</span>)</span><br><span class="line">                    count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minLen == Integer.MAX_VALUE ? <span class="string">""</span> : s.substring(start,start+minLen);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/minimum-window-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/minimum-window-substring/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>基于java的生产者和消费者三种实现方式</title>
    <link href="http://yoursite.com/2019/08/04/java-producer-consumer/"/>
    <id>http://yoursite.com/2019/08/04/java-producer-consumer/</id>
    <published>2019-08-04T12:54:27.000Z</published>
    <updated>2019-08-04T13:30:13.989Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="https://blog.csdn.net/qq_16622819/article/details/79907523" target="_blank" rel="noopener">基于java的生产者和消费者三种实现方式</a></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>生产者和消费者问题是一个经典的线程同步问题。生产者（Producer）生产产品（Product），放入仓库（Repertory）；消费者（Consumer）消费产品，从仓库里获取。仓库爆满时生产者等待消费者消费，仓库为空时消费者等待生产者生产。</p><a id="more"></a><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>生产者Producer：        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Producer"</span>;</span><br><span class="line">    <span class="keyword">private</span> Repertory mRepertory;</span><br><span class="line"> </span><br><span class="line">    Producer(Repertory repertory) &#123;</span><br><span class="line">        mRepertory = repertory;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object product = <span class="keyword">new</span> Object();</span><br><span class="line">        mRepertory.produce(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者Consumer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Consumer"</span>;</span><br><span class="line">    <span class="keyword">private</span> Repertory mRepertory;</span><br><span class="line"> </span><br><span class="line">    Consumer(Repertory repertory) &#123;</span><br><span class="line">        mRepertory = repertory;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRepertory.consume();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仓库Repertory1：        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Repertory1</span> <span class="keyword">implements</span> <span class="title">Repertory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Repertory1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Object&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(Object product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(product);</span><br><span class="line">        Log.e(TAG, Thread.currentThread().getName() + <span class="string">"生产了: "</span> + product + <span class="string">"，还剩余："</span> + size());</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object product = list.remove();</span><br><span class="line">        Log.e(TAG, Thread.currentThread().getName() + <span class="string">"消费了: "</span> + product + <span class="string">"，还剩余："</span> + size());</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == MAX_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lock-Condition"><a href="#Lock-Condition" class="headerlink" title="Lock/Condition"></a>Lock/Condition</h2><p>仓库Repertory2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Repertory2</span> <span class="keyword">implements</span> <span class="title">Repertory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Repertory2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Object&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock mLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition mEmptyCondition = mLock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition mFullCondition = mLock.newCondition();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(Object product)</span> </span>&#123;</span><br><span class="line">        mLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mFullCondition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(product);</span><br><span class="line">            Log.e(TAG, Thread.currentThread().getName() + <span class="string">"生产了: "</span> + product + <span class="string">"，还剩余："</span> + size());</span><br><span class="line">            mEmptyCondition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mEmptyCondition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Object product = list.remove();</span><br><span class="line">            Log.e(TAG, Thread.currentThread().getName() + <span class="string">"消费了: "</span> + product + <span class="string">"，还剩余："</span> + size());</span><br><span class="line">            mFullCondition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == MAX_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BlockingDeque"><a href="#BlockingDeque" class="headerlink" title="BlockingDeque"></a>BlockingDeque</h2><p>仓库Reprotory3： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Repertory3</span> <span class="keyword">implements</span> <span class="title">Repertory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Repertory3"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> BlockingDeque&lt;Object&gt; list = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(MAX_SIZE);</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(Object product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list.put(product);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(TAG, Thread.currentThread().getName() + <span class="string">"生产了: "</span> + product);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            product = list.take();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(TAG, Thread.currentThread().getName() + <span class="string">"消费了: "</span> + product);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == MAX_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自：&lt;a href=&quot;https://blog.csdn.net/qq_16622819/article/details/79907523&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于java的生产者和消费者三种实现方式&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;生产者和消费者问题是一个经典的线程同步问题。生产者（Producer）生产产品（Product），放入仓库（Repertory）；消费者（Consumer）消费产品，从仓库里获取。仓库爆满时生产者等待消费者消费，仓库为空时消费者等待生产者生产。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA字符串格式化-String.format()的使用</title>
    <link href="http://yoursite.com/2019/08/03/java-string-format/"/>
    <id>http://yoursite.com/2019/08/03/java-string-format/</id>
    <published>2019-08-03T13:11:53.000Z</published>
    <updated>2019-08-03T13:22:41.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="https://www.cnblogs.com/Dhouse/p/7776780.html" target="_blank" rel="noopener">JAVA字符串格式化-String.format()的使用</a></p></blockquote><a id="more"></a><h2 id="常规类型的格式化"><a href="#常规类型的格式化" class="headerlink" title="常规类型的格式化"></a>常规类型的格式化</h2><p>String类的format()方法用于创建格式化的字符串以及连接多个字符串对象。熟悉C语言的同学应该记得C语言的sprintf()方法，两者有类似之处。format()方法有两种重载形式。</p><p>format(String format, Object… args) 新字符串使用本地语言环境，制定字符串格式和参数生成格式化的新字符串。</p><p>format(Locale locale, String format, Object… args) 使用指定的语言环境，制定字符串格式和参数生成格式化的字符串。</p><p>显示不同转换符实现不同数据类型到字符串的转换，如图所示</p><table><thead><tr><th>转  换  符</th><th>说    明</th><th>示    例</th></tr></thead><tbody><tr><td>%s</td><td>字符串类型</td><td>“mingrisoft”</td></tr><tr><td>%c</td><td>字符类型</td><td>‘m’</td></tr><tr><td>%b</td><td>布尔类型</td><td>true</td></tr><tr><td>%d</td><td>整数类型（十进制）</td><td>99</td></tr><tr><td>%x</td><td>整数类型（十六进制）</td><td>FF</td></tr><tr><td>%o</td><td>整数类型（八进制）</td><td>77</td></tr><tr><td>%f</td><td>浮点类型</td><td>99.99</td></tr><tr><td>%a</td><td>十六进制浮点类型</td><td>FF.35AE</td></tr><tr><td>%e</td><td>指数类型</td><td>9.38e+5</td></tr><tr><td>%g</td><td>通用浮点类型（f和e类型中较短的）</td><td></td></tr><tr><td>%h</td><td>散列码</td><td></td></tr><tr><td>%%</td><td>百分比类型</td><td>％</td></tr><tr><td>%n</td><td>换行符</td><td></td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    String str=<span class="keyword">null</span>;  </span><br><span class="line">    str=String.format(<span class="string">"Hi,%s"</span>, <span class="string">"王力"</span>);  </span><br><span class="line">    System.out.println(str);  </span><br><span class="line">    str=String.format(<span class="string">"Hi,%s:%s.%s"</span>, <span class="string">"王南"</span>,<span class="string">"王力"</span>,<span class="string">"王张"</span>);            </span><br><span class="line">    System.out.println(str);                           </span><br><span class="line">    System.out.printf(<span class="string">"字母a的大写是：%c %n"</span>, <span class="string">'A'</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"3&gt;7的结果是：%b %n"</span>, <span class="number">3</span>&gt;<span class="number">7</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"100的一半是：%d %n"</span>, <span class="number">100</span>/<span class="number">2</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"100的16进制数是：%x %n"</span>, <span class="number">100</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"100的8进制数是：%o %n"</span>, <span class="number">100</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"50元的书打8.5折扣是：%f 元%n"</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"上面价格的16进制数是：%a %n"</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"上面价格的指数表示：%e %n"</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"上面价格的指数和浮点数结果的长度较短的是：%g %n"</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"上面的折扣是%d%% %n"</span>, <span class="number">85</span>);  </span><br><span class="line">    System.out.printf(<span class="string">"字母A的散列码是：%h %n"</span>, <span class="string">'A'</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hi,王力  </span><br><span class="line">Hi,王南:王力.王张  </span><br><span class="line">字母a的大写是：A   </span><br><span class="line">3&gt;7的结果是：false   </span><br><span class="line">100的一半是：50   </span><br><span class="line">100的16进制数是：64   </span><br><span class="line">100的8进制数是：144   </span><br><span class="line">50元的书打8.5折扣是：42.500000 元  </span><br><span class="line">上面价格的16进制数是：0x1.54p5   </span><br><span class="line">上面价格的指数表示：4.250000e+01   </span><br><span class="line">上面价格的指数和浮点数结果的长度较短的是：42.5000   </span><br><span class="line">上面的折扣是85%   </span><br><span class="line">字母A的散列码是：41</span><br></pre></td></tr></table></figure><h2 id="搭配转换符的标志"><a href="#搭配转换符的标志" class="headerlink" title="搭配转换符的标志"></a>搭配转换符的标志</h2><p>如图所示：</p><table><thead><tr><th>标    志</th><th>说    明</th><th>示    例</th><th>结    果</th></tr></thead><tbody><tr><td>+</td><td>为正数或者负数添加符号</td><td>(“%+d”,15)</td><td>+15</td></tr><tr><td>−</td><td>左对齐</td><td>(“%-5d”,15)</td><td>|15   |</td></tr><tr><td>0</td><td>数字前面补0</td><td>(“%04d”, 99)</td><td>0099</td></tr><tr><td>空格</td><td>在整数之前添加指定数量的空格</td><td>(“% 4d”, 99)</td><td>|  99|</td></tr><tr><td>,</td><td>以“,”对数字分组</td><td>(“%,f”, 9999.99)</td><td>9,999.990000</td></tr><tr><td>(</td><td>使用括号包含负数</td><td>(“%(f”, -99.99)</td><td>(99.990000)</td></tr><tr><td>#</td><td>如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0</td><td>(“%#x”, 99)(“%#o”, 99)</td><td>0x630143</td></tr><tr><td>&lt;</td><td>格式化前一个转换符所描述的参数</td><td>(“%f和%&lt;3.2f”, 99.45)</td><td>99.450000和99.45</td></tr><tr><td>$</td><td>被格式化的参数索引</td><td>(“%1$d,%2$s”, 99,”abc”)</td><td>99,abc</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    String str=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="comment">//$使用  </span></span><br><span class="line">    str=String.format(<span class="string">"格式参数$的使用：%1$d,%2$s"</span>, <span class="number">99</span>,<span class="string">"abc"</span>);             </span><br><span class="line">    System.out.println(str);                       </span><br><span class="line">    <span class="comment">//+使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"显示正负数的符号：%+d与%d%n"</span>, <span class="number">99</span>,-<span class="number">99</span>);  </span><br><span class="line">    <span class="comment">//补O使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"最牛的编号是：%03d%n"</span>, <span class="number">7</span>);  </span><br><span class="line">    <span class="comment">//空格使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"Tab键的效果是：% 8d%n"</span>, <span class="number">7</span>);  </span><br><span class="line">    <span class="comment">//.使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"整数分组的效果是：%,d%n"</span>, <span class="number">9989997</span>);  </span><br><span class="line">    <span class="comment">//空格和小数点后面个数  </span></span><br><span class="line">    System.out.printf(<span class="string">"一本书的价格是：% 50.5f元%n"</span>, <span class="number">49.8</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式参数$的使用：99,abc  </span><br><span class="line">显示正负数的符号：+99与-99  </span><br><span class="line">最牛的编号是：007  </span><br><span class="line">Tab键的效果是：       7  </span><br><span class="line">整数分组的效果是：9,989,997  </span><br><span class="line">一本书的价格是：                                          49.80000元</span><br></pre></td></tr></table></figure><h2 id="日期和事件字符串格式化"><a href="#日期和事件字符串格式化" class="headerlink" title="日期和事件字符串格式化"></a><strong>日期和事件字符串格式化</strong></h2><p>在程序界面中经常需要显示时间和日期，但是其显示的 格式经常不尽人意，需要编写大量的代码经过各种算法才得到理想的日期与时间格式。字符串格式中还有%tx转换符没有详细介绍，它是专门用来格式化日期和时 间的。%tx转换符中的x代表另外的处理日期和时间格式的转换符，它们的组合能够将日期和时间格式化成多种格式。</p><p>常见日期和时间组合的格式，如图所示。</p><table><thead><tr><th>转  换  符</th><th>说    明</th><th>示    例</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td><td>星期六 十月 27 14:21:20 CST 2007</td></tr><tr><td>F</td><td>“年-月-日”格式</td><td>2007-10-27</td></tr><tr><td>D</td><td>“月/日/年”格式</td><td>10/27/07</td></tr><tr><td>r</td><td>“HH:MM:SS PM”格式（12时制）</td><td>02:25:51 下午</td></tr><tr><td>T</td><td>“HH:MM:SS”格式（24时制）</td><td>14:28:16</td></tr><tr><td>R</td><td>“HH:MM”格式（24时制）</td><td>14:28</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    Date date=<span class="keyword">new</span> Date();                                  </span><br><span class="line">    <span class="comment">//c的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"全部日期和时间信息：%tc%n"</span>,date);          </span><br><span class="line">    <span class="comment">//f的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"年-月-日格式：%tF%n"</span>,date);  </span><br><span class="line">    <span class="comment">//d的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"月/日/年格式：%tD%n"</span>,date);  </span><br><span class="line">    <span class="comment">//r的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"HH:MM:SS PM格式（12时制）：%tr%n"</span>,date);  </span><br><span class="line">    <span class="comment">//t的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"HH:MM:SS格式（24时制）：%tT%n"</span>,date);  </span><br><span class="line">    <span class="comment">//R的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"HH:MM格式（24时制）：%tR"</span>,date);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </span><br><span class="line">年-月-日格式：2012-09-10  </span><br><span class="line">月/日/年格式：09/10/12  </span><br><span class="line">HH:MM:SS PM格式（12时制）：10:43:36 上午  </span><br><span class="line">HH:MM:SS格式（24时制）：10:43:36  </span><br><span class="line">HH:MM格式（24时制）：10:43</span><br></pre></td></tr></table></figure><p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如图所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    Date date=<span class="keyword">new</span> Date();                                      </span><br><span class="line">    <span class="comment">//b的使用，月份简称  </span></span><br><span class="line">    String str=String.format(Locale.US,<span class="string">"英文月份简称：%tb"</span>,date);       </span><br><span class="line">    System.out.println(str);                                                                              </span><br><span class="line">    System.out.printf(<span class="string">"本地月份简称：%tb%n"</span>,date);  </span><br><span class="line">    <span class="comment">//B的使用，月份全称  </span></span><br><span class="line">    str=String.format(Locale.US,<span class="string">"英文月份全称：%tB"</span>,date);  </span><br><span class="line">    System.out.println(str);  </span><br><span class="line">    System.out.printf(<span class="string">"本地月份全称：%tB%n"</span>,date);  </span><br><span class="line">    <span class="comment">//a的使用，星期简称  </span></span><br><span class="line">    str=String.format(Locale.US,<span class="string">"英文星期的简称：%ta"</span>,date);  </span><br><span class="line">    System.out.println(str);  </span><br><span class="line">    <span class="comment">//A的使用，星期全称  </span></span><br><span class="line">    System.out.printf(<span class="string">"本地星期的简称：%tA%n"</span>,date);  </span><br><span class="line">    <span class="comment">//C的使用，年前两位  </span></span><br><span class="line">    System.out.printf(<span class="string">"年的前两位数字（不足两位前面补0）：%tC%n"</span>,date);  </span><br><span class="line">    <span class="comment">//y的使用，年后两位  </span></span><br><span class="line">    System.out.printf(<span class="string">"年的后两位数字（不足两位前面补0）：%ty%n"</span>,date);  </span><br><span class="line">    <span class="comment">//j的使用，一年的天数  </span></span><br><span class="line">    System.out.printf(<span class="string">"一年中的天数（即年的第几天）：%tj%n"</span>,date);  </span><br><span class="line">    <span class="comment">//m的使用，月份  </span></span><br><span class="line">    System.out.printf(<span class="string">"两位数字的月份（不足两位前面补0）：%tm%n"</span>,date);  </span><br><span class="line">    <span class="comment">//d的使用，日（二位，不够补零）  </span></span><br><span class="line">    System.out.printf(<span class="string">"两位数字的日（不足两位前面补0）：%td%n"</span>,date);  </span><br><span class="line">    <span class="comment">//e的使用，日（一位不补零）  </span></span><br><span class="line">    System.out.printf(<span class="string">"月份的日（前面不补0）：%te"</span>,date);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">英文月份简称：Sep  </span><br><span class="line">本地月份简称：九月  </span><br><span class="line">英文月份全称：September  </span><br><span class="line">本地月份全称：九月  </span><br><span class="line">英文星期的简称：Mon  </span><br><span class="line">本地星期的简称：星期一  </span><br><span class="line">年的前两位数字（不足两位前面补0）：20  </span><br><span class="line">年的后两位数字（不足两位前面补0）：12  </span><br><span class="line">一年中的天数（即年的第几天）：254  </span><br><span class="line">两位数字的月份（不足两位前面补0）：09  </span><br><span class="line">两位数字的日（不足两位前面补0）：10  </span><br><span class="line">月份的日（前面不补0）：10</span><br></pre></td></tr></table></figure><p>和日期格式转换符相比，时间格式的转换符要更多、更精确。它可以将时间格式化成时、分、秒甚至时毫秒等单位。格式化时间字符串的转换符如图所示。</p><table><thead><tr><th>转  换  符</th><th>说    明</th><th>示    例</th></tr></thead><tbody><tr><td>H</td><td>2位数字24时制的小时（不足2位前面补0）</td><td>15</td></tr><tr><td>I</td><td>2位数字12时制的小时（不足2位前面补0）</td><td>03</td></tr><tr><td>k</td><td>2位数字24时制的小时（前面不补0）</td><td>15</td></tr><tr><td>l</td><td>2位数字12时制的小时（前面不补0）</td><td>3</td></tr><tr><td>M</td><td>2位数字的分钟（不足2位前面补0）</td><td>03</td></tr><tr><td>S</td><td>2位数字的秒（不足2位前面补0）</td><td>09</td></tr><tr><td>L</td><td>3位数字的毫秒（不足3位前面补0）</td><td>015</td></tr><tr><td>N</td><td>9位数字的毫秒数（不足9位前面补0）</td><td>562000000</td></tr><tr><td>p</td><td>小写字母的上午或下午标记</td><td>中：下午英：pm</td></tr><tr><td>z</td><td>相对于GMT的RFC822时区的偏移量</td><td>+0800</td></tr><tr><td>Z</td><td>时区缩写字符串</td><td>CST</td></tr></tbody></table><table><thead><tr><th>s</th><th>1970-1-1 00:00:00 到现在所经过的秒数</th><th>1193468128</th></tr></thead><tbody><tr><td>Q</td><td>1970-1-1 00:00:00 到现在所经过的毫秒数</td><td>1193468128984</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    Date date = <span class="keyword">new</span> Date();  </span><br><span class="line">    <span class="comment">//H的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"2位数字24时制的小时（不足2位前面补0）:%tH%n"</span>, date);  </span><br><span class="line">    <span class="comment">//I的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"2位数字12时制的小时（不足2位前面补0）:%tI%n"</span>, date);  </span><br><span class="line">    <span class="comment">//k的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"2位数字24时制的小时（前面不补0）:%tk%n"</span>, date);  </span><br><span class="line">    <span class="comment">//l的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"2位数字12时制的小时（前面不补0）:%tl%n"</span>, date);  </span><br><span class="line">    <span class="comment">//M的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"2位数字的分钟（不足2位前面补0）:%tM%n"</span>, date);  </span><br><span class="line">    <span class="comment">//S的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"2位数字的秒（不足2位前面补0）:%tS%n"</span>, date);  </span><br><span class="line">    <span class="comment">//L的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"3位数字的毫秒（不足3位前面补0）:%tL%n"</span>, date);  </span><br><span class="line">    <span class="comment">//N的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"9位数字的毫秒数（不足9位前面补0）:%tN%n"</span>, date);  </span><br><span class="line">    <span class="comment">//p的使用  </span></span><br><span class="line">    String str = String.format(Locale.US, <span class="string">"小写字母的上午或下午标记(英)：%tp"</span>, date);  </span><br><span class="line">    System.out.println(str);   </span><br><span class="line">    System.out.printf(<span class="string">"小写字母的上午或下午标记（中）：%tp%n"</span>, date);  </span><br><span class="line">    <span class="comment">//z的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"相对于GMT的RFC822时区的偏移量:%tz%n"</span>, date);  </span><br><span class="line">    <span class="comment">//Z的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"时区缩写字符串:%tZ%n"</span>, date);  </span><br><span class="line">    <span class="comment">//s的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"1970-1-1 00:00:00 到现在所经过的秒数：%ts%n"</span>, date);  </span><br><span class="line">    <span class="comment">//Q的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n"</span>, date);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2位数字24时制的小时（不足2位前面补0）:11  </span><br><span class="line">2位数字12时制的小时（不足2位前面补0）:11  </span><br><span class="line">2位数字24时制的小时（前面不补0）:11  </span><br><span class="line">2位数字12时制的小时（前面不补0）:11  </span><br><span class="line">2位数字的分钟（不足2位前面补0）:03  </span><br><span class="line">2位数字的秒（不足2位前面补0）:52  </span><br><span class="line">3位数字的毫秒（不足3位前面补0）:773  </span><br><span class="line">9位数字的毫秒数（不足9位前面补0）:773000000  </span><br><span class="line">小写字母的上午或下午标记(英)：am  </span><br><span class="line">小写字母的上午或下午标记（中）：上午  </span><br><span class="line">相对于GMT的RFC822时区的偏移量:+0800  </span><br><span class="line">时区缩写字符串:CST  </span><br><span class="line">1970-1-1 00:00:00 到现在所经过的秒数：1347246232  </span><br><span class="line">1970-1-1 00:00:00 到现在所经过的毫秒数：1347246232773</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自：&lt;a href=&quot;https://www.cnblogs.com/Dhouse/p/7776780.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JAVA字符串格式化-String.format()的使用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL中where子句中不能出现聚合函数的原因</title>
    <link href="http://yoursite.com/2019/08/01/sql-where-no-agg/"/>
    <id>http://yoursite.com/2019/08/01/sql-where-no-agg/</id>
    <published>2019-08-01T12:43:35.000Z</published>
    <updated>2019-08-01T15:04:52.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="https://blog.csdn.net/zhaomengszu/article/details/80784096" target="_blank" rel="noopener">SQL中where子句中不能出现聚合函数的原因</a></p></blockquote><p>首先我们应该熟悉什么聚合函数：</p><p>例如<code>SUM()</code>,<code>MIN()</code>,<code>Max()</code>这类的，我们称作是<strong>聚合函数</strong>。</p><p>那么我们<strong>不能在where子句中使用这些函数</strong>，为什么呢？</p><p>聚集函数也叫列函数，它们都是<strong>基于整列数据进行计算</strong>的，而where子句则是<strong>对数据行进行过滤的</strong>，在筛选过程中依赖“基于已经筛选完毕的数据得出的计算结果”是一种悖论，这是行不通的。更简单地说，<strong>因为聚集函数要对全列数据进行计算，因而使用它的前提是：结果集已经确定！</strong></p><p><strong>而where子句还处于“确定”结果集的过程中，因而不能使用聚集函数。</strong></p><a id="more"></a><p>与where子句不能出现聚集函数正相反的是，我们几乎看不到不使用聚集函数的having子句（<strong>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用</strong>）。为什么？因为在水平方向上根据外部指定条件的筛选（也就是对行的筛选），where子句可以独立完成，剩下的往往都是需要根据结果集自身的统计数据进一步筛选了，这时，几乎都需要通过<code>having</code>子句配合聚集函数来完成。</p><p>按照下面这个就是错误的，会报一个错误：<strong>Group function is not allowed here</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> department_id,<span class="keyword">avg</span>(salary)  </span><br><span class="line"><span class="keyword">from</span> employees  </span><br><span class="line"><span class="keyword">where</span>  <span class="keyword">avg</span>(salary)&gt;<span class="number">6000</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id  </span><br><span class="line"><span class="comment">--having  avg(salary)&gt;6000</span></span><br></pre></td></tr></table></figure><p>原因。</p><p>sql语句的执行顺序为</p><p> <strong>from子句</strong></p><p><strong>where 子句</strong></p><p><strong>group by 子句</strong></p><p><strong>having 子句</strong></p><p><strong>order by 子句</strong></p><p><strong>select 子句</strong></p><p>首先得知道<strong>聚合函数是对结果集运算的</strong>，当在where子句使用聚合函数时，此时根据group by 分割结果集的子句还没有执行，此时只有from 后的结果集。</p><p>所以无法在where子句中使用聚合函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自：&lt;a href=&quot;https://blog.csdn.net/zhaomengszu/article/details/80784096&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQL中where子句中不能出现聚合函数的原因&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们应该熟悉什么聚合函数：&lt;/p&gt;
&lt;p&gt;例如&lt;code&gt;SUM()&lt;/code&gt;,&lt;code&gt;MIN()&lt;/code&gt;,&lt;code&gt;Max()&lt;/code&gt;这类的，我们称作是&lt;strong&gt;聚合函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么我们&lt;strong&gt;不能在where子句中使用这些函数&lt;/strong&gt;，为什么呢？&lt;/p&gt;
&lt;p&gt;聚集函数也叫列函数，它们都是&lt;strong&gt;基于整列数据进行计算&lt;/strong&gt;的，而where子句则是&lt;strong&gt;对数据行进行过滤的&lt;/strong&gt;，在筛选过程中依赖“基于已经筛选完毕的数据得出的计算结果”是一种悖论，这是行不通的。更简单地说，&lt;strong&gt;因为聚集函数要对全列数据进行计算，因而使用它的前提是：结果集已经确定！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而where子句还处于“确定”结果集的过程中，因而不能使用聚集函数。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库两大神器【索引和锁】</title>
    <link href="http://yoursite.com/2019/07/27/mysql-index-lock/"/>
    <id>http://yoursite.com/2019/07/27/mysql-index-lock/</id>
    <published>2019-07-27T13:08:31.000Z</published>
    <updated>2019-07-27T13:34:07.582Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://juejin.im/post/5b55b842f265da0f9e589e79" target="_blank" rel="noopener">数据库两大神器【索引和锁】</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>只有光头才能变强</p></blockquote><p><strong>索引和锁</strong>在数据库中可以说是非常重要的知识点了，在面试中也会经常会被问到的。</p><p>本文<strong>力求简单讲清每个知识点</strong>，希望大家看完能有所收获</p><blockquote><p>声明：如果没有说明具体的数据库和存储引擎，<strong>默认指的是MySQL中的InnoDB存储引擎</strong></p></blockquote><a id="more"></a><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在之前，我对索引有以下的认知：</p><ul><li><strong>索引可以加快数据库的检索速度</strong></li><li>表<strong>经常</strong>进行<code>INSERT/UPDATE/DELETE</code>操作就不要建立索引了，换言之：<strong>索引会降低</strong>插入、删除、修改等维护任务的速度。</li><li>索引需要<strong>占物理和数据空间</strong>。</li><li>了解过索引的最左匹配原则</li><li>知道索引的分类：聚集索引和非聚集索引</li><li>Mysql支持Hash索引和B+树索引两种</li></ul><p>看起来好像啥都知道，但面试让你说的时候可能就GG了：</p><ul><li>使用索引为什么可以加快数据库的检索速度啊？</li><li>为什么说索引会降低插入、删除、修改等维护任务的速度。</li><li>索引的最左匹配原则指的是什么？</li><li>Hash索引和B+树索引有什么区别？主流的使用哪一个比较多？InnoDB存储都支持吗？</li><li>聚集索引和非聚集索引有什么区别？</li><li>……..</li></ul><h2 id="聊聊索引的基础知识"><a href="#聊聊索引的基础知识" class="headerlink" title="聊聊索引的基础知识"></a>聊聊索引的基础知识</h2><p>首先Mysql的基本存储结构是<strong>页</strong>(记录都存在页里边)：</p><p><img src="1.jpg" alt></p><p><img src="2.jpg" alt></p><ul><li><p><strong>各个数据页</strong>可以组成一个<strong>双向链表</strong></p></li><li><p>而</p><p>每个数据页中的记录</p><p>又可以组成一个</p><p>单向</p><p>链表 </p><ul><li>每个数据页都会为存储在它里边儿的记录生成一个<strong>页目录</strong>，在通过<strong>主键</strong>查找某条记录的时候可以在页目录中使用<strong>二分法快速定位</strong>到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</li><li>以<strong>其他列</strong>(非主键)作为搜索条件：只能从最小记录开始<strong>依次遍历单链表中的每条记录</strong>。</li></ul></li></ul><p>所以说，如果我们写<code>select * from user where username = &#39;Java3y&#39;</code>这样没有进行任何优化的sql语句，默认会这样做：</p><ul><li>定位到记录所在的页 <ul><li>需要遍历双向链表，找到所在的页</li></ul></li><li>从所在的页内中查找相应的记录 <ul><li>由于不是根据主键查询，只能遍历所在页的单链表了</li></ul></li></ul><p>很明显，在数据量很大的情况下这样查找会<strong>很慢</strong>！</p><h2 id="索引提高检索速度"><a href="#索引提高检索速度" class="headerlink" title="索引提高检索速度"></a>索引提高检索速度</h2><p>索引做了些什么可以让我们查询加快速度呢？</p><p>其实就是<strong>将无序的数据变成有序(相对)</strong>：</p><p><img src="3.jpg" alt></p><p>要找到id为8的记录简要步骤：</p><p><img src="4.jpg" alt></p><p>很明显的是：<strong>没有用索引</strong>我们是需要<strong>遍历双向链表</strong>来定位对应的页，现在通过<strong>“目录”</strong>就可以很快地定位到对应的页上了！</p><p>其实底层结构就是<strong>B+树</strong>，B+树作为树的一种实现，能够让我们<strong>很快地</strong>查找出对应的记录。</p><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIxNTQ3NDMzMw%3D%3D%26mid%3D2247483701%26idx%3D1%26sn%3Dbd229dd584f51ef4fe545d44ad8cdbf9%26chksm%3D979688c7a0e101d1b5c752094013b78f5bd50ab905257ba82149d85d35ea07aba1a15b0e52b4%26mpshare%3D1%26scene%3D1%26srcid%3D0409Tn66UYWSWvqEVlOpwGtR%26key%3D6cd553e86912686a47d76f2d900b1b5b388c90b29708f016db3a6e1bcebe032220ba63626095c4298f32cda7d0d7bd11bded2365f05c32e522584dd149b98db0bb8549ef144cdca694665d31d35cfeef%26ascene%3D0%26uin%3DMzAzMjU4NDM3Nw%3D%3D%26devicetype%3DiMac%2BMacBookPro12%2C1%2BOSX%2BOSX%2B10.12.4%2Bbuild(16E195)%26version%3D12020810%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26pass_ticket%3DYHEmqDDX8hHkj5FiSVpQvjYqIMBDHHDS2po4mfJe%2BqIXlqwJI%2Bg7aJUZq0%2BDwGJ0" target="_blank" rel="noopener">Mysql索引</a></li></ul><h2 id="索引降低增删改的速度"><a href="#索引降低增删改的速度" class="headerlink" title="索引降低增删改的速度"></a>索引降低增删改的速度</h2><p>B+树是<strong>平衡树</strong>的一种。</p><blockquote><p>平衡树：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p></blockquote><p>如果一棵普通的树在<strong>极端</strong>的情况下，是能<strong>退化成链表</strong>的(树的优点就不复存在了)</p><p><img src="5.jpg" alt></p><p>B+树是平衡树的一种，是不会退化成链表的，树的高度都是相对比较低的(基本符合<strong>矮矮胖胖(均衡)的结构</strong>)【这样一来我们检索的时间复杂度就是O(logn)】！从上一节的图我们也可以看见，建立索引实际上就是建立一颗B+树。</p><ul><li>B+树是一颗平衡树，如果我们对这颗树增删改的话，那肯定会<strong>破坏它的原有结构</strong>。</li><li><strong>要维持平衡树，就必须做额外的工作</strong>。正因为这些额外的工作<strong>开销</strong>，导致索引会降低增删改的速度</li></ul><p>B+树删除和修改具体可参考：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Fwade-luffy%2Fp%2F6292784.html" target="_blank" rel="noopener">www.cnblogs.com/wade-luffy/…</a></li></ul><h2 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h2><p>除了B+树之外，还有一种常见的是哈希索引。</p><p>哈希索引就是采用一定的<strong>哈希算法</strong>，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可<strong>立刻定位到相应的位置，速度非常快</strong>。</p><ul><li>本质上就是<strong>把键值换算成新的哈希值</strong>，根据这个<strong>哈希值来定位</strong>。</li></ul><p><img src="6.jpg" alt></p><p>看起来哈希索引很牛逼啊，但其实哈希索引有好几个局限(根据他本质的原理可得)：</p><ul><li>哈希索引也没办法利用索引完成<strong>排序</strong></li><li>不支持<strong>最左匹配原则</strong></li><li>在有大量重复键值情况下，哈希索引的效率也是极低的—-&gt;<strong>哈希碰撞</strong>问题。</li><li><strong>不支持范围查询</strong></li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fzengkefu%2Fp%2F5647279.html" target="_blank" rel="noopener">www.cnblogs.com/zengkefu/p/…</a>—hash索引和b+tree索引</li></ul><h2 id="InnoDB支持哈希索引吗？"><a href="#InnoDB支持哈希索引吗？" class="headerlink" title="InnoDB支持哈希索引吗？"></a>InnoDB支持哈希索引吗？</h2><p>主流的还是使用<strong>B+树索引比较多</strong>，对于哈希索引，<strong>InnoDB是自适应哈希索引</strong>的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，我们干预不了）！</p><p><img src="7.jpg" alt></p><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fdoctor_who2004%2Farticle%2Fdetails%2F77414742" target="_blank" rel="noopener">blog.csdn.net/doctor_who2…</a></li></ul><h2 id="聚集和非聚集索引"><a href="#聚集和非聚集索引" class="headerlink" title="聚集和非聚集索引"></a>聚集和非聚集索引</h2><p>简单概括：</p><ul><li>聚集索引就是以<strong>主键</strong>创建的索引</li><li>非聚集索引就是以<strong>非主键</strong>创建的索引</li></ul><p>区别：</p><ul><li>聚集索引在叶子节点存储的是<strong>表中的数据</strong></li><li>非聚集索引在叶子节点存储的是<strong>主键和索引列</strong></li><li>使用非聚集索引查询出数据时，<strong>拿到叶子上的主键再去查到想要查找的数据</strong>。(拿到主键再查找这个过程叫做<strong>回表</strong>)</li></ul><p><strong>非聚集索引也叫做二级索引</strong>，不用纠结那么多名词，将其等价就行了~</p><p>非聚集索引在建立的时候也<strong>未必是单列</strong>的，可以多个列来创建索引。</p><ul><li>此时就涉及到了哪个列会走索引，哪个列不走索引的问题了(最左匹配原则–&gt;后面有说)</li><li><strong>创建多个单列(非聚集)索引的时候，会生成多个索引树</strong>(所以过多创建索引会占用磁盘空间)</li></ul><p><img src="8.jpg" alt></p><p>在创建多列索引中也涉及到了一种特殊的索引–&gt;<strong>覆盖索引</strong></p><ul><li>我们前面知道了，如果不是聚集索引，叶子节点存储的是主键+列值</li><li>最终还是要“回表”，也就是要通过主键<strong>再</strong>查找一次。这样就会比较慢</li><li>覆盖索引就是把要<strong>查询出的列和索引是对应的</strong>，不做回表操作！</li></ul><p>比如说：</p><ul><li>现在我创建了索引<code>(username,age)</code>，在查询数据的时候：<code>select username , age from user where username = &#39;Java3y&#39; and age = 20</code>。</li><li>很明显地知道，我们上边的查询是走索引的，并且，<strong>要查询出的列在叶子节点都存在</strong>！所以，就不用回表了~</li><li>所以，能使用覆盖索引就尽量使用吧~</li></ul><h2 id="索引最左匹配原则"><a href="#索引最左匹配原则" class="headerlink" title="索引最左匹配原则"></a>索引最左匹配原则</h2><p><strong>最左匹配原则</strong>：</p><ul><li>索引可以简单如一个列<code>(a)</code>，也可以复杂如多个列<code>(a, b, c, d)</code>，即<strong>联合索引</strong>。</li><li>如果是联合索引，那么key也由多个列组成，同时，索引只能用于查找key是否<strong>存在（相等）</strong>，遇到范围查询<code>(&gt;、&lt;、between、like</code>左匹配)等就<strong>不能进一步匹配</strong>了，后续退化为线性查找。</li><li>因此，<strong>列的排列顺序决定了可命中索引的列数</strong>。</li></ul><p>例子：</p><ul><li>如有索引<code>(a, b, c, d)</code>，查询条件<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code>，则会在每个节点依次命中a、b、c，无法命中d。(很简单：索引命中只能是<strong>相等</strong>的情况，不能是范围匹配)</li></ul><h2 id="、in自动优化顺序"><a href="#、in自动优化顺序" class="headerlink" title="=、in自动优化顺序"></a>=、in自动优化顺序</h2><p><strong>不需要考虑=、in等的顺序</strong>，mysql会自动优化这些条件的顺序，以匹配尽可能多的索引列。</p><p>例子：</p><ul><li>如有索引<code>(a, b, c, d)</code>，查询条件<code>c &gt; 3 and b = 2 and a = 1 and d &lt; 4</code>与<code>a = 1 and c &gt; 3 and b = 2 and d &lt; 4</code>等顺序都是可以的，MySQL会自动优化为<code>a = 1 and b = 2 and c &gt; 3 and d &lt; 4</code>，依次命中a、b、c。</li></ul><h2 id="索引总结"><a href="#索引总结" class="headerlink" title="索引总结"></a>索引总结</h2><p>索引在数据库中是一个<strong>非常</strong>重要的知识点！上面谈的其实就是索引<strong>最基本</strong>的东西，要创建出好的索引要顾及到很多的方面：</p><ul><li>1，<strong>最左前缀匹配原则</strong>。这是非常重要、非常重要、非常重要（重要的事情说三遍）的原则，MySQL会一直向右匹配直到遇到范围查询<code>（&gt;,&lt;,BETWEEN,LIKE）</code>就停止匹配。</li><li>3，尽量选择<strong>区分度高的列作为索引</strong>，区分度的公式是 <code>COUNT(DISTINCT col) / COUNT(*)</code>。表示字段不重复的比率，比率越大我们扫描的记录数就越少。</li><li>4，<strong>索引列不能参与计算，尽量保持列“干净”</strong>。比如，<code>FROM_UNIXTIME(create_time) = &#39;2016-06-06&#39;</code> 就不能使用索引，原因很简单，<strong>B+树中存储的都是数据表中的字段值</strong>，但是进行检索时，需要把所有元素都应用函数才能比较，显然这样的代价太大。所以语句要写成 ： <code>create_time = UNIX_TIMESTAMP(&#39;2016-06-06&#39;)</code>。</li><li>5，尽可能的<strong>扩展索引</strong>，不要新建立索引。比如表中已经有了a的索引，现在要加（a,b）的索引，那么只需要修改原来的索引即可。</li><li>6，单个多列组合索引和多个单列索引的检索查询效果不同，因为在执行SQL时，<strong>MySQL只能使用一个索引</strong>，会从多个单列索引中选择一个限制最为严格的索引。</li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F23624390" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/23624390</a>–简单理解索引</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fmysteryhaohao%2Farticle%2Fdetails%2F51719871" target="_blank" rel="noopener">blog.csdn.net/mysteryhaoh…</a>– MySQL学习之——索引(普通索引、唯一索引、全文索引、索引匹配原则、索引命中等)</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fmonkeysayhi.github.io%2F2018%2F03%2F06%2F%E6%B5%85%E8%B0%88MySQL%E7%9A%84B%E6%A0%91%E7%B4%A2%E5%BC%95%E4%B8%8E%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%2F" target="_blank" rel="noopener">monkeysayhi.github.io/2018/03/06/…</a>—浅谈MySQL的B树索引与索引优化</li></ul><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p><img src="9.jpg" alt></p><p>在mysql中的锁<strong>看起来</strong>是很复杂的，因为有<strong>一大堆的东西和名词</strong>：排它锁，共享锁，表锁，页锁，间隙锁，意向排它锁，意向共享锁，行锁，读锁，写锁，乐观锁，悲观锁，死锁。这些名词有的博客又直接写锁的英文的简写—&gt;X锁，S锁，IS锁，IX锁，MMVC…</p><p>锁的相关知识又跟存储引擎，索引，事务的隔离级别都是关联的….</p><p>这就给初学数据库锁的人带来不少的麻烦<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 为什么需要学习数据库锁知识</span><br><span class="line"></span><br><span class="line">不少人在开发的时候，应该**很少会注意到**这些锁的问题，也很少会给程序加锁(除了**库存**这些对数量准确性要求极高的情况下)</span><br><span class="line"></span><br><span class="line">一般也就听过常说的乐观锁和悲观锁，了解过基本的含义之后就没了</span><br></pre></td></tr></table></figure></p><p><strong>定心丸</strong>：即使我们不会这些锁知识，我们的程序在<strong>一般情况下</strong>还是可以跑得好好的。因为这些锁数据库<strong>隐式</strong>帮我们加了</p><ul><li>对于<code>UPDATE、DELETE、INSERT</code>语句，<strong>InnoDB</strong>会<strong>自动</strong>给涉及数据集加排他锁（X)</li><li><strong>MyISAM</strong>在执行查询语句<code>SELECT</code>前，会<strong>自动</strong>给涉及的所有表加<strong>读锁</strong>，在执行更新操作（<code>UPDATE、DELETE、INSERT</code>等）前，会<strong>自动</strong>给涉及的表加<strong>写锁</strong>，这个过程并<strong>不需要用户干预</strong></li></ul><p>只会在某些特定的场景下才需要<strong>手动</strong>加锁，学习数据库锁知识就是为了:</p><ul><li>能让我们在特定的场景下派得上用场</li><li>更好<strong>把控自己写的程序</strong></li><li>在跟别人聊数据库技术的时候可以搭上几句话</li><li><strong>构建自己的知识库体系</strong>！在面试的时候不虚</li></ul><h2 id="表锁简单介绍"><a href="#表锁简单介绍" class="headerlink" title="表锁简单介绍"></a>表锁简单介绍</h2><p>首先，从锁的粒度，我们可以分成两大类：</p><ul><li>表锁<ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>行锁<ul><li>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</li></ul></li></ul><p>不同的存储引擎支持的锁粒度是不一样的：</p><ul><li><strong>InnoDB行锁和表锁都支持</strong>！</li><li><strong>MyISAM只支持表锁</strong>！</li></ul><p>InnoDB只有通过<strong>索引条件</strong>检索数据<strong>才使用行级锁</strong>，否则，InnoDB将使用<strong>表锁</strong></p><ul><li>也就是说，<strong>InnoDB的行锁是基于索引的</strong>！</li></ul><p><strong>表锁下又分为两种模式</strong>：</p><ul><li><p>表读锁（Table Read Lock）</p></li><li><p>表写锁（Table Write Lock）</p></li><li><p>从下图可以清晰看到，在表读锁和表写锁的环境下：</p><p>读读不阻塞，读写阻塞，写写阻塞</p><p>！ </p><ul><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li><li>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</li><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li></ul></li></ul><p><img src="10.jpg" alt></p><p>从上面已经看到了：<strong>读锁和写锁是互斥的，读写操作是串行</strong>。</p><ul><li>如果某个进程想要获取读锁，<strong>同时</strong>另外一个进程想要获取写锁。在mysql里边，<strong>写锁是优先于读锁的</strong>！</li><li>写锁和读锁优先级的问题是可以通过参数调节的：<code>max_write_lock_count</code>和<code>low-priority-updates</code></li></ul><p>值得注意的是：</p><blockquote><p>The LOCAL modifier enables nonconflicting INSERT statements (concurrent inserts) by other sessions to execute while the lock is held. (See Section 8.11.3, “Concurrent Inserts”.) However, READ LOCAL cannot be used if you are going to manipulate the database using processes external to the server while you hold the lock. <strong>For InnoDB tables, READ LOCAL is the same as READ</strong></p></blockquote><ul><li><strong>MyISAM可以</strong>支持查询和插入操作的<strong>并发</strong>进行。可以通过系统变量<code>concurrent_insert</code>来指定哪种模式，在<strong>MyISAM</strong>中它默认是：如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从<strong>表尾</strong>插入记录。</li><li>但是<strong>InnoDB存储引擎是不支持的</strong>！</li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F8.0%2Fen%2Flock-tables.html" target="_blank" rel="noopener">dev.mysql.com/doc/refman/…</a>–官方手册</li><li><a href="https://link.juejin.im?target=http%3A%2F%2Fourmysql.com%2Farchives%2F564" target="_blank" rel="noopener">ourmysql.com/archives/56…</a>—几个参数说明</li></ul><h2 id="行锁细讲"><a href="#行锁细讲" class="headerlink" title="行锁细讲"></a>行锁细讲</h2><p>上边简单讲解了表锁的相关知识，我们使用Mysql一般是使用InnoDB存储引擎的。InnoDB和MyISAM有两个本质的区别：</p><ul><li>InnoDB支持行锁</li><li>InnoDB支持事务</li></ul><p>从上面也说了：我们是<strong>很少手动加表锁</strong>的。表锁对我们程序员来说几乎是透明的，即使InnoDB不走索引，加的表锁也是自动的！</p><p>我们应该<strong>更加关注行锁的内容</strong>，因为InnoDB一大特性就是支持行锁！</p><p>InnoDB实现了以下<strong>两种</strong>类型的行锁。</p><ul><li>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。 <ul><li>也叫做<strong>读锁</strong>：读锁是<strong>共享</strong>的，多个客户可以<strong>同时读取同一个</strong>资源，但<strong>不允许其他客户修改</strong>。</li></ul></li><li>排他锁（X锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。 <ul><li>也叫做<strong>写锁</strong>：写锁是排他的，<strong>写锁会阻塞其他的写锁和读锁</strong>。</li></ul></li></ul><p>看完上面的有没有发现，在一开始所说的：X锁，S锁，读锁，写锁，共享锁，排它锁其实<strong>总共就两个锁</strong>，只不过它们<strong>有多个名字罢了</strong><del>~</del></p><blockquote><p>Intention locks do not block anything except full table requests (for example, LOCK TABLES … WRITE). The main purpose of intention locks <strong>is to show that someone is locking a row, or going to lock a row in the table</strong>.</p></blockquote><p>另外，<strong>为了允许行锁和表锁共存，实现多粒度锁机制</strong>，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>：</p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</li><li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</li><li>意向锁也是数据库隐式帮我们做了，<strong>不需要程序员操心</strong>！</li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F51513268" target="_blank" rel="noopener">www.zhihu.com/question/51…</a></li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F8.0%2Fen%2Finnodb-locking.html" target="_blank" rel="noopener">dev.mysql.com/doc/refman/…</a></li></ul><h3 id="MVCC和事务的隔离级别"><a href="#MVCC和事务的隔离级别" class="headerlink" title="MVCC和事务的隔离级别"></a>MVCC和事务的隔离级别</h3><p>数据库事务有不同的隔离级别，不同的隔离级别对锁的使用是不同的，<strong>锁的应用最终导致不同事务的隔离级别</strong></p><p>MVCC(Multi-Version Concurrency Control)多版本并发控制，可以简单地认为：<strong>MVCC就是行级锁的一个变种(升级版)</strong>。</p><ul><li>事务的隔离级别就是<strong>通过锁的机制来实现</strong>，只不过<strong>隐藏了加锁细节</strong></li></ul><p>在<strong>表锁中我们读写是阻塞</strong>的，基于提升并发性能的考虑，<strong>MVCC一般读写是不阻塞的</strong>(所以说MVCC很多情况下避免了加锁的操作)</p><ul><li>MVCC实现的<strong>读写不阻塞</strong>正如其名：<strong>多版本</strong>并发控制—&gt;通过一定机制生成一个数据请求<strong>时间点的一致性数据快照（Snapshot)</strong>，并用这个快照来提供一定级别（<strong>语句级或事务级</strong>）的<strong>一致性读取</strong>。从用户的角度来看，好像是<strong>数据库可以提供同一数据的多个版本</strong>。</li></ul><p>快照有<strong>两个级别</strong>：</p><ul><li>语句级 <ul><li>针对于<code>Read committed</code>隔离级别</li></ul></li><li>事务级别 <ul><li>针对于<code>Repeatable read</code>隔离级别</li></ul></li></ul><p>我们在初学的时候已经知道，事务的隔离级别有<strong>4种</strong>：</p><ul><li>Read uncommitted <ul><li>会出现脏读，不可重复读，幻读</li></ul></li><li>Read committed <ul><li>会出现不可重复读，幻读</li></ul></li><li>Repeatable read <ul><li>会出现幻读(但在Mysql实现的Repeatable read配合gap锁不会出现幻读！)</li></ul></li><li>Serializable <ul><li>串行，避免以上的情况！</li></ul></li></ul><hr><p><code>Read uncommitted</code>会出现的现象—&gt;脏读：<strong>一个事务读取到另外一个事务未提交的数据</strong></p><ul><li>例子：A向B转账，<strong>A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了</strong>！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多。</li><li>出现脏读的本质就是因为<strong>操作(修改)完该数据就立马释放掉锁</strong>，导致读的数据就变成了无用的或者是<strong>错误的数据</strong>。</li></ul><hr><p><code>Read committed</code><strong>避免脏读</strong>的做法其实很简单：</p><ul><li>就是把<strong>释放锁的位置调整到事务提交之后</strong>，此时在事务提交前，其他进程是无法对该行数据进行读取的，包括任何操作</li></ul><p>但<code>Read committed</code>出现的现象—&gt;不可重复读：<strong>一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改</strong></p><ul><li>注：<strong>A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的，那么A查询出来的信息就没有意思了】</strong></li></ul><hr><p>上面也说了，<code>Read committed</code>是<strong>语句级别</strong>的快照！<strong>每次读取的都是当前最新的版本</strong>！</p><p><code>Repeatable read</code>避免不可重复读是<strong>事务级别</strong>的快照！每次读取的都是当前事务的版本，即使被修改了，也只会读取当前事务版本的数据。</p><p>呃…如果还是不太清楚，我们来看看InnoDB的MVCC是怎么样的吧(摘抄《高性能MySQL》)</p><p><img src="11.jpg" alt></p><p><img src="12.jpg" alt></p><p>至于虚读(幻读)：<strong>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</strong></p><ul><li>注：<strong>和不可重复读类似，但虚读(幻读)会读到其他事务的插入的数据，导致前后读取不一致</strong></li><li>MySQL的<code>Repeatable read</code>隔离级别加上GAP间隙锁<strong>已经处理了幻读了</strong>。</li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fcb97f76a92fd" target="_blank" rel="noopener">www.jianshu.com/p/cb97f76a9…</a></li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F263820564" target="_blank" rel="noopener">www.zhihu.com/question/26…</a></li></ul><p>扩展阅读：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F67739617" target="_blank" rel="noopener">www.zhihu.com/question/67…</a></li></ul><h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><p>无论是<code>Read committed</code>还是<code>Repeatable read</code>隔离级别，都是为了解决<strong>读写冲突</strong>的问题。</p><p>单纯在<code>Repeatable read</code>隔离级别下我们来考虑一个问题：</p><p><img src="13.jpg" alt></p><p>此时，用户李四的操作就丢失掉了：</p><ul><li><strong>丢失更新</strong>：一个事务的更新<strong>覆盖了其它事务的更新结果</strong>。</li></ul><p>(ps:暂时没有想到比较好的例子来说明更新丢失的问题，虽然上面的例子也是更新丢失，但<strong>一定程度上是可接受的</strong>..不知道有没有人能想到不可接受的更新丢失例子呢…)</p><p>解决的方法：</p><ul><li>使用Serializable隔离级别，事务是串行执行的！</li><li>乐观锁</li><li>悲观锁</li></ul><blockquote><ol><li>乐观锁是一种思想，具体实现是，表中有一个版本字段，第一次读的时候，获取到这个字段。处理完业务逻辑开始更新的时候，需要再次查看该字段的值是否和第一次的一样。如果一样更新，反之拒绝。之所以叫乐观，因为这个模式没有从数据库加锁，等到更新的时候再判断是否可以更新。</li><li>悲观锁是数据库层面加锁，都会阻塞去等待锁。</li></ol></blockquote><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>所以，按照上面的例子。我们使用悲观锁的话其实很简单(手动加行锁就行了)：</p><ul><li><code>select * from xxxx for update</code></li></ul><p>在select 语句后边加了 <code>for update</code>相当于加了排它锁(写锁)，加了写锁以后，其他的事务就不能对它修改了！需要等待当前事务修改完之后才可以修改.</p><ul><li>也就是说，如果张三使用<code>select ... for update</code>，李四就无法对该条记录修改了~</li></ul><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁不是数据库层面上的锁，是需要自己手动去加的锁。一般我们添加一个版本字段来实现：</p><p>具体过程是这样的：</p><p>张三<code>select * from table</code>  —&gt;会查询出记录出来，同时会有一个version字段</p><p><img src="14.jpg" alt></p><p>李四<code>select * from table</code>  —&gt;会查询出记录出来，同时会有一个version字段</p><p><img src="15.jpg" alt></p><p>李四对这条记录做修改：<code>update A set Name=lisi,version=version+1 where ID=#{id} and version=#{version}</code>，判断之前查询到的version与现在的数据的version进行比较，<strong>同时会更新version字段</strong></p><p>此时数据库记录如下：</p><p><img src="16.jpg" alt></p><p>张三也对这条记录修改：<code>update A set Name=lisi,version=version+1 where ID=#{id} and version=#{version}</code>，但失败了！因为<strong>当前数据库中的版本跟查询出来的版本不一致</strong>！</p><p><img src="17.jpg" alt></p><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F31537871" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/31537871</a>—什么是悲观锁和乐观锁</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F27876575" target="_blank" rel="noopener">www.zhihu.com/question/27…</a>—乐观锁和 MVCC 的区别？</li></ul><h2 id="间隙锁GAP"><a href="#间隙锁GAP" class="headerlink" title="间隙锁GAP"></a>间隙锁GAP</h2><p>当我们<strong>用范围条件检索数据</strong>而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给<strong>符合范围条件的已有数据记录的索引项加锁</strong>；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”。InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。</p><p>值得注意的是：间隙锁只会在<code>Repeatable read</code>隔离级别下使用~</p><p>例子：假如emp表中只有101条记录，其empid的值分别是1,2,…,100,101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select * from  emp where empid &gt; 100 for update;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>上面是一个范围查询，InnoDB<strong>不仅</strong>会对符合条件的empid值为101的记录加锁，也会对<strong>empid大于101（这些记录并不存在）的“间隙”加锁</strong>。</p><p>InnoDB使用间隙锁的目的有两个：</p><ul><li><strong>为了防止幻读</strong>(上面也说了，<code>Repeatable read</code>隔离级别下再通过GAP锁即可避免了幻读)</li><li>满足恢复和复制的需要<ul><li>MySQL的恢复机制要求：<strong>在一个事务未提交前，其他并发事务不能插入满足其锁定条件的任何记录，也就是不允许出现幻读</strong></li></ul></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>并发的问题就少不了死锁，在MySQL中同样会存在死锁的问题。</p><p>但一般来说MySQL通过回滚帮我们解决了不少死锁的问题了，但死锁是无法完全避免的，可以通过以下的经验参考，来尽可能少遇到死锁：</p><ul><li>1）以<strong>固定的顺序</strong>访问表和行。比如对两个job批量更新的情形，简单方法是对id列表先排序，后执行，这样就避免了交叉等待锁的情形；将两个事务的sql顺序调整为一致，也能避免死锁。</li><li>2）<strong>大事务拆小</strong>。大事务更倾向于死锁，如果业务允许，将大事务拆小。</li><li>3）在同一个事务中，尽可能做到<strong>一次锁定</strong>所需要的所有资源，减少死锁概率。</li><li>4）<strong>降低隔离级别</strong>。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</li><li>5）<strong>为表添加合理的索引</strong>。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。</li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=http%3A%2F%2Fhedengcheng.com%2F%3Fp%3D771%23_Toc374698322" target="_blank" rel="noopener">hedengcheng.com/?p=771#_Toc…</a></li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2FLBSer%2Fp%2F5183300.html" target="_blank" rel="noopener">www.cnblogs.com/LBSer/p/518…</a></li></ul><h2 id="锁总结"><a href="#锁总结" class="headerlink" title="锁总结"></a>锁总结</h2><p>上面说了一大堆关于MySQL数据库锁的东西，现在来简单总结一下。</p><p>表锁其实我们程序员是很少关心它的：</p><ul><li>在MyISAM存储引擎中，当执行SQL语句的时候是自动加的。</li><li>在InnoDB存储引擎中，如果没有使用索引，表锁也是自动加的。</li></ul><p>现在我们大多数使用MySQL都是使用InnoDB，InnoDB支持行锁：</p><ul><li>共享锁–读锁–S锁</li><li>排它锁–写锁–X锁</li></ul><p>在默认的情况下，<code>select</code>是不加任何行锁的~事务可以通过以下语句显示给记录集加共享锁或排他锁。</p><ul><li>共享锁（S）：<code>SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</code>。</li><li>排他锁（X)：<code>SELECT * FROM table_name WHERE ... FOR UPDATE</code>。</li></ul><p>InnoDB<strong>基于行锁</strong>还实现了MVCC多版本并发控制，MVCC在隔离级别下的<code>Read committed</code>和<code>Repeatable read</code>下工作。MVCC能够实现<strong>读写不阻塞</strong>！</p><p>InnoDB实现的<code>Repeatable read</code>隔离级别配合GAP间隙锁已经避免了幻读！</p><ul><li>乐观锁其实是一种思想，正如其名：认为不会锁定的情况下去更新数据，如果发现不对劲，才不更新(回滚)。在数据库中往往添加一个version字段来实现。</li><li>悲观锁用的就是数据库的行锁，认为数据库会发生并发冲突，直接上来就把数据锁住，其他事务不能修改，直至提交了当前事务</li></ul><p>参考资料：</p><ul><li><a href="https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F29150809" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/29150809</a>–Mysql锁总结</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fmysteryhaohao%2Farticle%2Fdetails%2F51669741" target="_blank" rel="noopener">blog.csdn.net/mysteryhaoh…</a>–MySQL学习之——锁(行锁、表锁、页锁、乐观锁、悲观锁等)</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000015596126" target="_blank" rel="noopener">segmentfault.com/a/119000001…</a>–MySQL InnoDB引擎锁的总结</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了数据库中的两个比较重要的知识点：索引和锁。他俩可以说息息相关的，锁会涉及到很多关于索引的知识~</p><p>我个人比较重视对整体知识点的把控，一些细节的地方可能就没有去编写了。在每一个知识点下都会有很多的内容，有兴趣的同学可以在我给出的链接中继续阅读学习。当然了，如果有比较好的文章和资料也不妨在评论区分享一下哈~</p><p>我只是在学习的过程中，把自己遇到的问题写出来，整理出来，希望可以对大家有帮助。如果文章有错的地方，希望大家可以在评论区指正，一起学习交流~</p><p>参考资料：</p><ul><li>《高性能MySQL 第三版》</li></ul><blockquote><p>作者：Java3y</p><p>链接：<a href="https://juejin.im/post/5b55b842f265da0f9e589e79" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79</a></p><p>来源：掘金著作权归作者所有。</p><p>商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;https://juejin.im/post/5b55b842f265da0f9e589e79&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据库两大神器【索引和锁】&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;只有光头才能变强&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;索引和锁&lt;/strong&gt;在数据库中可以说是非常重要的知识点了，在面试中也会经常会被问到的。&lt;/p&gt;
&lt;p&gt;本文&lt;strong&gt;力求简单讲清每个知识点&lt;/strong&gt;，希望大家看完能有所收获&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：如果没有说明具体的数据库和存储引擎，&lt;strong&gt;默认指的是MySQL中的InnoDB存储引擎&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
</feed>
